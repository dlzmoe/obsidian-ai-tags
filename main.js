/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// main.ts
__export(exports, {
  default: () => AutoTaggerPlugin
});
var import_obsidian = __toModule(require("obsidian"));

// src/errors/RequestError.ts
var RequestError = class extends Error {
  constructor(message, status) {
    super(message);
    this.status = status;
    this.name = "RequestError";
  }
};

// src/services/AIService.ts
var _AIService = class {
  getSystemPrompt() {
    var _a;
    return ((_a = this.config.customPrompt) == null ? void 0 : _a.trim()) || _AIService.DEFAULT_SYSTEM_PROMPT;
  }
  constructor(config) {
    this.config = config;
  }
  makeRequest(url, options) {
    return __async(this, null, function* () {
      var _a;
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), _AIService.TIMEOUT);
      try {
        const response = yield fetch(url, __spreadProps(__spreadValues({}, options), {
          signal: controller.signal
        }));
        if (!response.ok) {
          const error = yield response.json();
          throw new RequestError(((_a = error.error) == null ? void 0 : _a.message) || "\u8BF7\u6C42\u5931\u8D25", response.status);
        }
        return response;
      } catch (error) {
        if (error.name === "AbortError") {
          throw new RequestError("\u8BF7\u6C42\u8D85\u65F6", 408);
        }
        throw error;
      } finally {
        clearTimeout(timeoutId);
      }
    });
  }
  retryRequest(fn) {
    return __async(this, null, function* () {
      let lastError;
      for (let i = 0; i <= _AIService.MAX_RETRIES; i++) {
        try {
          return yield fn();
        } catch (error) {
          lastError = error;
          if (error instanceof RequestError && error.status >= 500) {
            yield new Promise((resolve) => setTimeout(resolve, Math.pow(2, i) * 1e3));
            continue;
          }
          throw error;
        }
      }
      throw lastError;
    });
  }
  calculateSimilarity(str1, str2) {
    str1 = str1.toLowerCase();
    str2 = str2.toLowerCase();
    if (str1 === str2)
      return 1;
    const set1 = new Set(str1.split(""));
    const set2 = new Set(str2.split(""));
    const intersection = new Set([...set1].filter((x) => set2.has(x)));
    return intersection.size / Math.max(set1.size, set2.size);
  }
  findSimilarExistingTag(newTag) {
    var _a;
    if (!((_a = this.config.existingTags) == null ? void 0 : _a.length))
      return null;
    const similarityThreshold = 0.7;
    let mostSimilarTag = null;
    let highestSimilarity = 0;
    for (const existingTag of this.config.existingTags) {
      const similarity = this.calculateSimilarity(newTag, existingTag);
      if (similarity > similarityThreshold && similarity > highestSimilarity) {
        highestSimilarity = similarity;
        mostSimilarTag = existingTag;
      }
    }
    return mostSimilarTag;
  }
  generateTags(content) {
    return __async(this, null, function* () {
      const provider = this.getProviderFromUrl();
      const response = yield this.makeRequest(this.getFullApiUrl(provider), {
        method: "POST",
        headers: this.getHeaders(provider),
        body: JSON.stringify(this.getRequestBody(content, provider))
      });
      const data = yield response.json();
      const generatedTags = this.parseResponse(data, provider);
      return generatedTags.map((tag) => {
        const similarTag = this.findSimilarExistingTag(tag);
        return similarTag || tag;
      });
    });
  }
  getProviderFromUrl() {
    if (this.config.apiUrl.includes("generativelanguage.googleapis.com")) {
      return "gemini";
    }
    if (this.config.apiUrl.includes("anthropic.com")) {
      return "claude";
    }
    if (this.config.apiUrl.includes("localhost:11434") || this.config.apiUrl.includes("ollama")) {
      return "ollama";
    }
    return "openai";
  }
  getCustomPrompt() {
    return this.plugin.settings.customPrompt;
  }
  getFullApiUrl(provider) {
    if (provider === "gemini") {
      const baseUrl = this.config.apiUrl;
      const modelPath = `/v1beta/models/${this.config.model}:generateContent`;
      if (baseUrl.includes("gemini-proxy")) {
        return baseUrl;
      }
      return `${baseUrl}${modelPath}`;
    }
    return this.config.apiUrl;
  }
  getHeaders(provider) {
    const headers = {
      "Content-Type": "application/json"
    };
    if (this.config.apiKey) {
      if (provider === "gemini") {
        headers["x-goog-api-key"] = this.config.apiKey;
      } else if (provider === "claude") {
        headers["x-api-key"] = this.config.apiKey;
      } else if (provider === "openai") {
        headers["Authorization"] = `Bearer ${this.config.apiKey}`;
      }
    }
    return headers;
  }
  getRequestBody(content, provider) {
    if (provider === "gemini") {
      return {
        contents: [
          {
            parts: [
              { text: this.getSystemPrompt() },
              { text: content }
            ]
          }
        ]
      };
    }
    if (provider === "claude") {
      return {
        model: this.config.model,
        max_tokens: 256,
        messages: [
          {
            role: "user",
            content
          }
        ]
      };
    }
    return {
      model: this.config.model,
      messages: [
        {
          role: "system",
          content: this.getSystemPrompt()
        },
        {
          role: "user",
          content
        }
      ]
    };
  }
  parseResponse(data, provider) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n;
    try {
      let tagsText = "";
      if (provider === "gemini") {
        tagsText = ((_f = (_e = (_d = (_c = (_b = (_a = data.candidates) == null ? void 0 : _a[0]) == null ? void 0 : _b.content) == null ? void 0 : _c.parts) == null ? void 0 : _d[0]) == null ? void 0 : _e.text) == null ? void 0 : _f.trim()) || "";
      } else if (provider === "claude") {
        tagsText = ((_i = (_h = (_g = data == null ? void 0 : data.content) == null ? void 0 : _g[0]) == null ? void 0 : _h.text) == null ? void 0 : _i.trim()) || ((_j = data == null ? void 0 : data.completion) == null ? void 0 : _j.trim()) || "";
      } else {
        tagsText = ((_n = (_m = (_l = (_k = data.choices) == null ? void 0 : _k[0]) == null ? void 0 : _l.message) == null ? void 0 : _m.content) == null ? void 0 : _n.trim()) || "";
      }
      return tagsText.split(",").map((tag) => tag.trim()).filter((tag) => tag).map((tag) => tag.replace(/\s+/g, ""));
    } catch (error) {
      throw new Error("\u89E3\u6790 AI \u54CD\u5E94\u5931\u8D25");
    }
  }
  testConnection() {
    return __async(this, null, function* () {
      const provider = this.getProviderFromUrl();
      const testMessage = "\u4F60\u597D";
      try {
        yield this.makeRequest(this.getFullApiUrl(provider), {
          method: "POST",
          headers: this.getHeaders(provider),
          body: JSON.stringify(this.getRequestBody(testMessage, provider))
        });
      } catch (error) {
        throw new Error(`API\u8FDE\u63A5\u6D4B\u8BD5\u5931\u8D25: ${error.message}`);
      }
    });
  }
};
var AIService = _AIService;
AIService.DEFAULT_SYSTEM_PROMPT = "\u4F60\u662F\u4E00\u4E2A\u6587\u6863\u6807\u7B7E\u751F\u6210\u5668\uFF0C\u8BF7\u6839\u636E\u6587\u6863\u5185\u5BB9\u751F\u6210\u6700\u591A 3 \u4E2A\u76F8\u5173\u7684\u6807\u7B7E\u3002\u53EA\u9700\u8FD4\u56DE\u6807\u7B7E\uFF0C\u7528\u9017\u53F7\u5206\u9694\uFF0C\u4E0D\u8981\u5305\u542B\u5176\u4ED6\u89E3\u91CA\u6216\u8BF4\u660E\uFF0C\u7981\u6B62\u6587\u672C\u4E2D\u5305\u542B\u7A7A\u683C\u3002";
AIService.TIMEOUT = 3e4;
AIService.MAX_RETRIES = 2;

// main.ts
var PROVIDER_CONFIGS = {
  openai: {
    defaultUrl: "https://api.openai.com/v1/chat/completions",
    defaultModel: "gpt-3.5-turbo",
    models: ["gpt-3.5-turbo", "gpt-4"]
  },
  gemini: {
    defaultUrl: "https://generativelanguage.googleapis.com/v1beta/models",
    defaultModel: "gemini-pro",
    models: ["gemini-pro"]
  },
  claude: {
    defaultUrl: "https://api.anthropic.com/v1/messages",
    defaultModel: "claude-3-opus-20240229",
    models: ["claude-3-opus-20240229", "claude-3-sonnet-20240229"]
  },
  deepseek: {
    defaultUrl: "https://api.deepseek.com/v1/chat/completions",
    defaultModel: "deepseek-chat",
    models: ["deepseek-chat"]
  },
  volcano: {
    defaultUrl: "https://ark.cn-beijing.volces.com/api/v3/chat/completions",
    defaultModel: "volcengine",
    models: ["volcengine"]
  },
  ollama: {
    defaultUrl: "http://localhost:11434/v1/chat/completions",
    defaultModel: "llama3",
    models: ["llama3", "phi3", "qwen2", "mistral"]
  }
};
var DEFAULT_SETTINGS = {
  provider: "openai",
  providerSettings: {
    openai: {
      apiKey: "",
      apiUrl: PROVIDER_CONFIGS.openai.defaultUrl,
      model: PROVIDER_CONFIGS.openai.defaultModel
    },
    gemini: {
      apiKey: "",
      apiUrl: PROVIDER_CONFIGS.gemini.defaultUrl,
      model: PROVIDER_CONFIGS.gemini.defaultModel
    },
    claude: {
      apiKey: "",
      apiUrl: PROVIDER_CONFIGS.claude.defaultUrl,
      model: PROVIDER_CONFIGS.claude.defaultModel
    },
    deepseek: {
      apiKey: "",
      apiUrl: PROVIDER_CONFIGS.deepseek.defaultUrl,
      model: PROVIDER_CONFIGS.deepseek.defaultModel
    },
    volcano: {
      apiKey: "",
      apiUrl: PROVIDER_CONFIGS.volcano.defaultUrl,
      model: PROVIDER_CONFIGS.volcano.defaultModel
    },
    ollama: {
      apiKey: "",
      apiUrl: PROVIDER_CONFIGS.ollama.defaultUrl,
      model: PROVIDER_CONFIGS.ollama.defaultModel
    }
  },
  customPrompt: ""
};
var AutoTaggerPlugin = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.existingTags = new Set();
  }
  onload() {
    return __async(this, null, function* () {
      yield this.loadSettings();
      yield this.loadExistingTags();
      this.addRibbonIcon("tag", "\u751F\u6210\u6807\u7B7E", () => __async(this, null, function* () {
        yield this.generateTags();
      }));
      this.addSettingTab(new AutoTaggerSettingTab(this.app, this));
      this.registerEvent(this.app.vault.on("rename", () => this.loadExistingTags()));
      this.registerEvent(this.app.vault.on("delete", () => this.loadExistingTags()));
      this.registerEvent(this.app.vault.on("create", () => this.loadExistingTags()));
    });
  }
  loadSettings() {
    return __async(this, null, function* () {
      this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
    });
  }
  saveSettings() {
    return __async(this, null, function* () {
      yield this.saveData(this.settings);
    });
  }
  loadExistingTags() {
    return __async(this, null, function* () {
      this.existingTags = new Set();
      const files = this.app.vault.getMarkdownFiles();
      for (const file of files) {
        const cache = this.app.metadataCache.getFileCache(file);
        if ((cache == null ? void 0 : cache.frontmatter) && cache.frontmatter.tags) {
          const tags = Array.isArray(cache.frontmatter.tags) ? cache.frontmatter.tags : [cache.frontmatter.tags];
          tags.forEach((tag) => this.existingTags.add(tag));
        }
        if (cache == null ? void 0 : cache.tags) {
          cache.tags.forEach((tagObj) => this.existingTags.add(tagObj.tag.replace(/^#/, "")));
        }
      }
    });
  }
  findRelevantExistingTags(content) {
    const relevantTags = [];
    const contentLower = content.toLowerCase();
    const words = contentLower.split(/[\s,，.。!！?？;；:：]/);
    for (const tag of this.existingTags) {
      const tagLower = tag.toLowerCase();
      if (contentLower.includes(tagLower) || words.some((word) => tagLower.includes(word))) {
        relevantTags.push(tag);
        if (relevantTags.length >= 2)
          break;
      }
    }
    return relevantTags;
  }
  generateTags() {
    return __async(this, null, function* () {
      const activeView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
      if (!activeView) {
        new import_obsidian.Notice("\u8BF7\u6253\u5F00\u4E00\u4E2A\u6587\u6863\u4EE5\u751F\u6210\u6807\u7B7E");
        return;
      }
      const file = activeView.file;
      const content = yield this.app.vault.read(file);
      const loadingNotice = new import_obsidian.Notice("\u6B63\u5728\u751F\u6210\u6807\u7B7E...", 0);
      try {
        const tags = yield this.analyzeTags(content);
        loadingNotice.hide();
        new TagSelectionModal(this.app, tags, (selectedTags) => __async(this, null, function* () {
          yield this.updateFileFrontMatter(file, selectedTags);
        })).open();
      } catch (error) {
        loadingNotice.hide();
        new import_obsidian.Notice(`\u751F\u6210\u6807\u7B7E\u5931\u8D25\uFF1A${error.message}`);
      }
    });
  }
  analyzeTags(content) {
    return __async(this, null, function* () {
      const provider = this.settings.provider;
      const providerConfig = this.settings.providerSettings[provider];
      if (!providerConfig) {
        new import_obsidian.Notice("AI Tags \u914D\u7F6E\u9519\u8BEF\uFF1A\u672A\u627E\u5230\u5F53\u524D\u670D\u52A1\u5546\u7684\u914D\u7F6E\uFF0C\u8BF7\u91CD\u65B0\u4FDD\u5B58\u8BBE\u7F6E\u3002");
        return [];
      }
      if (!providerConfig.apiUrl || !providerConfig.model) {
        new import_obsidian.Notice("AI Tags \u914D\u7F6E\u9519\u8BEF\uFF1AAPI \u5730\u5740\u6216\u6A21\u578B\u672A\u8BBE\u7F6E\uFF0C\u8BF7\u5728\u8BBE\u7F6E\u4E2D\u8865\u5168\u3002");
        return [];
      }
      const allExistingTags = Array.from(this.existingTags);
      const smartPrompt = `\u4F60\u662F\u4E00\u4E2A\u6587\u6863\u6807\u7B7E\u751F\u6210\u5668\u3002\u8BF7\u6839\u636E\u4EE5\u4E0B\u6587\u6863\u5185\u5BB9\u548C\u5DF2\u6709\u6807\u7B7E\u5217\u8868\uFF0C\u4F18\u5148\u4ECE\u5DF2\u6709\u6807\u7B7E\u4E2D\u6311\u90091-2\u4E2A\u6700\u76F8\u5173\u7684\u6807\u7B7E\uFF0C\u518D\u8865\u5145\u65B0\u6807\u7B7E\u4F7F\u603B\u6570\u8FBE\u52303\u4E2A\u3002\u5982\u679C\u6CA1\u6709\u5408\u9002\u7684\u5DF2\u6709\u6807\u7B7E\uFF0C\u53EF\u4EE5\u5168\u90E8\u65B0\u751F\u6210\u3002\u53EA\u8FD4\u56DE\u6807\u7B7E\uFF0C\u7528\u9017\u53F7\u5206\u9694\uFF0C\u4E0D\u8981\u5305\u542B\u5176\u4ED6\u5185\u5BB9\u3002

\u6587\u6863\u5185\u5BB9\uFF1A
${content}

\u5DF2\u6709\u6807\u7B7E\u5217\u8868\uFF1A
${allExistingTags.join(", ")}
`;
      const config = {
        apiKey: providerConfig.apiKey,
        apiUrl: providerConfig.apiUrl,
        model: providerConfig.model,
        customPrompt: smartPrompt
      };
      const aiService = new AIService(config);
      try {
        const result = yield aiService.generateTags(content);
        return result;
      } catch (error) {
        new import_obsidian.Notice("AI Tags \u751F\u6210\u6807\u7B7E\u65F6\u51FA\u9519\uFF0C\u8BF7\u68C0\u67E5\u63A7\u5236\u53F0\u65E5\u5FD7\u3002");
        return [];
      }
    });
  }
  updateFileFrontMatter(file, newTags) {
    return __async(this, null, function* () {
      const content = yield this.app.vault.read(file);
      const yamlRegex = /^---\n([\s\S]*?)\n---/;
      const hasYaml = yamlRegex.test(content);
      let newContent;
      if (hasYaml) {
        const yamlMatch = content.match(yamlRegex);
        const yaml = yamlMatch[1];
        const tagsRegex = /^tags:\s*\[(.*)\]/m;
        const tagsMatch = yaml.match(tagsRegex);
        if (tagsMatch) {
          const existingTagsStr = tagsMatch[1];
          const existingTags = existingTagsStr.split(",").map((tag) => tag.trim()).filter((tag) => tag !== "");
          const allTags = [...new Set([...existingTags, ...newTags])];
          newContent = content.replace(tagsRegex, `tags: [${allTags.join(", ")}]`);
        } else {
          newContent = content.replace(yamlRegex, `---
${yaml}
tags: [${newTags.join(", ")}]
---`);
        }
      } else {
        newContent = `---
tags: [${newTags.join(", ")}]
---

${content}`;
      }
      yield this.app.vault.modify(file, newContent);
      new import_obsidian.Notice(`\u5DF2\u6210\u529F\u6DFB\u52A0\u6807\u7B7E\uFF1A${newTags.join(", ")}`);
    });
  }
};
var TagSelectionModal = class extends import_obsidian.Modal {
  constructor(app, tags, onSubmit) {
    super(app);
    this.tags = tags;
    this.onSubmit = onSubmit;
    this.selectedTags = [...tags];
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h3", { text: "\u6807\u7B7E\u751F\u6210" });
    const tagContainer = contentEl.createDiv({ cls: "tag-container" });
    this.tags.forEach((tag, index) => {
      const tagRow = tagContainer.createDiv({ cls: "tag-row" });
      const checkbox = tagRow.createEl("input", {
        type: "checkbox",
        attr: { checked: true }
      });
      const tagInput = tagRow.createEl("input", {
        type: "text",
        value: tag
      });
      checkbox.addEventListener("change", () => {
        if (checkbox.checked) {
          this.selectedTags[index] = tagInput.value;
        } else {
          this.selectedTags[index] = null;
        }
      });
      tagInput.addEventListener("input", () => {
        if (checkbox.checked) {
          this.selectedTags[index] = tagInput.value;
        }
      });
    });
    const buttonContainer = contentEl.createDiv({ cls: "button-container" });
    buttonContainer.createEl("button", { text: "\u53D6\u6D88" }).addEventListener("click", () => {
      this.close();
    });
    buttonContainer.createEl("button", { text: "\u786E\u5B9A" }).addEventListener("click", () => {
      const finalTags = this.selectedTags.filter((tag) => tag !== null);
      this.onSubmit(finalTags);
      this.close();
    });
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var AutoTaggerSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h3", { text: "\u81EA\u52A8\u6807\u7B7E\u751F\u6210\u8BBE\u7F6E" });
    const githubLink = containerEl.createEl("a", {
      text: "\u5728 GitHub \u4E0A\u63D0\u4EA4\u53CD\u9988",
      href: "https://github.com/dlzmoe/obsidian-ai-tags"
    });
    githubLink.addClass("setting-item-description");
    githubLink.addClass("github-feedback-link");
    const providerDescriptions = {
      openai: [
        "OpenAI",
        "\u2022 API \u5730\u5740\uFF1Ahttps://api.openai.com/v1/chat/completions",
        "\u2022 \u652F\u6301\u6A21\u578B\uFF1Agpt-4o-mini, gpt-4o, gpt-3.5-turbo"
      ],
      gemini: [
        "Gemini",
        "\u2022 API \u5730\u5740\uFF1Ahttps://generativelanguage.googleapis.com\uFF08\u6682\u4E0D\u652F\u6301\u4EE3\u7406\u5730\u5740\uFF09",
        "\u2022 \u652F\u6301\u6A21\u578B\uFF1Agemini-1.5-flash, gemini-2.0-flash"
      ],
      claude: [
        "Claude",
        "\u2022 API \u5730\u5740\uFF1Ahttps://api.anthropic.com/v1/messages",
        "\u2022 \u652F\u6301\u6A21\u578B\uFF1Aclaude-3-5-sonnet, claude-3-7-sonnet, claude-3-opus, claude-3-haiku"
      ],
      deepseek: [
        "DeepSeek - \u6DF1\u5EA6\u6C42\u7D22",
        "\u2022 API \u5730\u5740\uFF1Ahttps://api.deepseek.com/v1/chat/completions",
        "\u2022 \u652F\u6301\u6A21\u578B\uFF1Adeepseek-chat, deepseek-reasoner"
      ],
      volcano: [
        "DeepSeek - \u706B\u5C71\u5F15\u64CE",
        "\u2022 API \u5730\u5740\uFF1Ahttps://ark.cn-beijing.volces.com/api/v3/chat/completions",
        "\u2022 \u6CE8\u610F\uFF1A\u9700\u8981\u5728\u706B\u5C71\u65B9\u821F\u8BBE\u7F6E\u63A8\u7406\u6A21\u578B\uFF0C\u7136\u540E\u6DFB\u52A0\u6A21\u578B\u540D\u79F0\uFF0C\u5982\uFF1Aep-20250221084433"
      ],
      ollama: [
        "Ollama\uFF08\u672C\u5730\uFF09",
        "\u2022 API \u5730\u5740\uFF1Ahttp://localhost:11434/v1/chat/completions",
        "\u2022 \u652F\u6301\u6A21\u578B\uFF1Allama3, phi3, qwen2, mistral \u7B49\u672C\u5730\u6A21\u578B",
        "\u2022 \u672C\u5730\u90E8\u7F72\uFF0C\u65E0\u9700 API Key"
      ]
    };
    const showProviderInfo = (provider) => {
      const providerSection = containerEl.querySelector(".provider-section");
      if (providerSection) {
        providerSection.remove();
      }
      const section = containerEl.createDiv({ cls: "provider-section" });
      const providerInfo = section.createDiv({ cls: "provider-info" });
      if (providerDescriptions[provider]) {
        providerDescriptions[provider].forEach((text) => {
          providerInfo.createEl("p", { text });
        });
      }
    };
    showProviderInfo(this.plugin.settings.provider);
    new import_obsidian.Setting(containerEl).setName("AI \u670D\u52A1\u5546").setDesc("\u9009\u62E9\u8981\u4F7F\u7528\u7684 AI \u670D\u52A1\u5546").addDropdown((dropdown) => {
      Object.keys(PROVIDER_CONFIGS).forEach((provider) => {
        let label = "";
        switch (provider) {
          case "openai":
            label = "OpenAI";
            break;
          case "gemini":
            label = "Gemini";
            break;
          case "claude":
            label = "Claude";
            break;
          case "deepseek":
            label = "DeepSeek - \u6DF1\u5EA6\u6C42\u7D22";
            break;
          case "volcano":
            label = "DeepSeek - \u706B\u5C71\u5F15\u64CE";
            break;
          case "ollama":
            label = "Ollama\uFF08\u672C\u5730\uFF09";
            break;
          default:
            label = provider;
        }
        dropdown.addOption(provider, label);
      });
      dropdown.setValue(this.plugin.settings.provider);
      dropdown.onChange((value) => __async(this, null, function* () {
        const currentProvider = this.plugin.settings.provider;
        const currentSettings = this.plugin.settings.providerSettings[currentProvider];
        this.plugin.settings.provider = value;
        if (!this.plugin.settings.providerSettings[value]) {
          this.plugin.settings.providerSettings[value] = {
            apiKey: "",
            apiUrl: PROVIDER_CONFIGS[value].defaultUrl,
            model: PROVIDER_CONFIGS[value].defaultModel
          };
        }
        yield this.plugin.saveSettings();
        this.display();
      }));
    });
    new import_obsidian.Setting(containerEl).setName("API \u5BC6\u94A5").setDesc("\u8F93\u5165\u4F60\u7684 API \u5BC6\u94A5").addText((text) => {
      text.setPlaceholder("\u8BF7\u8F93\u5165 API \u5BC6\u94A5").setValue(this.plugin.settings.providerSettings[this.plugin.settings.provider].apiKey).onChange((value) => __async(this, null, function* () {
        this.plugin.settings.providerSettings[this.plugin.settings.provider].apiKey = value;
        yield this.plugin.saveSettings();
      }));
    }).addExtraButton((btn) => {
      btn.setIcon("lucide-zap").setTooltip("\u6D4B\u8BD5\u8FDE\u901A\u6027").onClick(() => __async(this, null, function* () {
        var _a;
        btn.setDisabled(true);
        const originalIcon = (_a = btn.extraSettingsEl.querySelector("svg")) == null ? void 0 : _a.outerHTML;
        btn.setIcon("lucide-loader");
        btn.extraSettingsEl.classList.add("ai-tags-spin");
        const provider = this.plugin.settings.provider;
        const config = this.plugin.settings.providerSettings[provider];
        const aiService = new AIService({
          apiKey: config.apiKey,
          apiUrl: config.apiUrl,
          model: config.model
        });
        try {
          yield aiService.testConnection();
          new import_obsidian.Notice("API \u8FDE\u63A5\u6D4B\u8BD5\u6210\u529F");
        } catch (e) {
          new import_obsidian.Notice("API \u8FDE\u63A5\u6D4B\u8BD5\u5931\u8D25: " + ((e == null ? void 0 : e.message) || e));
        } finally {
          btn.setDisabled(false);
          btn.setIcon("lucide-zap");
          btn.extraSettingsEl.classList.remove("ai-tags-spin");
        }
      }));
    });
    new import_obsidian.Setting(containerEl).setName("API \u5730\u5740").setDesc("\u8F93\u5165 API \u5730\u5740").addText((text) => {
      text.setPlaceholder(PROVIDER_CONFIGS[this.plugin.settings.provider].defaultUrl).setValue(this.plugin.settings.providerSettings[this.plugin.settings.provider].apiUrl).onChange((value) => __async(this, null, function* () {
        this.plugin.settings.providerSettings[this.plugin.settings.provider].apiUrl = value;
        yield this.plugin.saveSettings();
      }));
    }).addExtraButton((btn) => {
      btn.setIcon("lucide-rotate-ccw").setTooltip("\u6062\u590D\u9ED8\u8BA4").onClick(() => __async(this, null, function* () {
        const provider = this.plugin.settings.provider;
        this.plugin.settings.providerSettings[provider].apiUrl = PROVIDER_CONFIGS[provider].defaultUrl;
        yield this.plugin.saveSettings();
        this.display();
      }));
    });
    new import_obsidian.Setting(containerEl).setName("\u9884\u8BBE\u6A21\u578B").setDesc("\u9009\u62E9\u9884\u8BBE\u7684 AI \u6A21\u578B").addDropdown((dropdown) => {
      var _a, _b, _c;
      const models = (_b = (_a = PROVIDER_CONFIGS[this.plugin.settings.provider]) == null ? void 0 : _a.models) != null ? _b : [];
      models.forEach((model) => {
        dropdown.addOption(model, model);
      });
      const currentModel = this.plugin.settings.providerSettings[this.plugin.settings.provider].model;
      const defaultModel = models.includes(currentModel) ? currentModel : (_c = models[0]) != null ? _c : "";
      dropdown.setValue(defaultModel);
      dropdown.onChange((value) => __async(this, null, function* () {
        const customModelInput = this.plugin.settings.providerSettings[this.plugin.settings.provider].customModel || "";
        if (!customModelInput.trim()) {
          this.plugin.settings.providerSettings[this.plugin.settings.provider].model = value;
          yield this.plugin.saveSettings();
        }
      }));
    }).settingEl.style.display = "none";
    new import_obsidian.Setting(containerEl).setName(this.plugin.settings.provider === "volcano" ? "\u6A21\u578B" : "\u81EA\u5B9A\u4E49\u6A21\u578B").setDesc(this.plugin.settings.provider === "volcano" ? "\u8F93\u5165\u6A21\u578B\u540D\u79F0" : "\u8F93\u5165\u81EA\u5B9A\u4E49\u6A21\u578B\u540D\u79F0 (\u4F18\u5148\u4F7F\u7528)").addText((text) => {
      text.setPlaceholder("\u81EA\u5B9A\u4E49\u6A21\u578B\u540D\u79F0").setValue(this.plugin.settings.providerSettings[this.plugin.settings.provider].model).onChange((value) => __async(this, null, function* () {
        this.plugin.settings.providerSettings[this.plugin.settings.provider].model = value.trim();
        yield this.plugin.saveSettings();
      }));
    });
    const defaultPrompt = "\u4F60\u662F\u4E00\u4E2A\u6587\u6863\u6807\u7B7E\u751F\u6210\u5668\uFF0C\u8BF7\u6839\u636E\u6587\u6863\u5185\u5BB9\u751F\u6210\u6700\u591A 3 \u4E2A\u76F8\u5173\u7684\u6807\u7B7E\u3002\u53EA\u9700\u8FD4\u56DE\u6807\u7B7E\uFF0C\u7528\u9017\u53F7\u5206\u9694\uFF0C\u4E0D\u8981\u5305\u542B\u5176\u4ED6\u89E3\u91CA\u6216\u8BF4\u660E\u3002";
    const customPromptSetting = new import_obsidian.Setting(containerEl).setClass("custom-prompt-setting").setName("\u81EA\u5B9A\u4E49\u63D0\u793A\u8BCD").setDesc("\u81EA\u5B9A\u4E49 AI \u751F\u6210\u6807\u7B7E\u7684\u63D0\u793A\u8BCD\uFF0C\u7559\u7A7A\u5219\u4F7F\u7528\u9ED8\u8BA4\u63D0\u793A\u8BCD").addTextArea((text) => {
      text.setValue(this.plugin.settings.customPrompt || defaultPrompt).onChange((value) => __async(this, null, function* () {
        this.plugin.settings.customPrompt = value;
        yield this.plugin.saveSettings();
      }));
      text.inputEl.rows = 6;
      text.inputEl.cols = 50;
      text.inputEl.style.minHeight = "150px";
      text.inputEl.style.resize = "vertical";
    }).addButton((button) => {
      button.setIcon("reset").setTooltip("\u91CD\u7F6E\u4E3A\u9ED8\u8BA4\u63D0\u793A\u8BCD").onClick(() => __async(this, null, function* () {
        this.plugin.settings.customPrompt = defaultPrompt;
        yield this.plugin.saveSettings();
        this.display();
      }));
    });
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyIsICJzcmMvZXJyb3JzL1JlcXVlc3RFcnJvci50cyIsICJzcmMvc2VydmljZXMvQUlTZXJ2aWNlLnRzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJpbXBvcnQgeyBBcHAsIFBsdWdpbiwgUGx1Z2luU2V0dGluZ1RhYiwgU2V0dGluZywgVEZpbGUsIE5vdGljZSwgTW9kYWwsIE1hcmtkb3duVmlldywgRHJvcGRvd25Db21wb25lbnQsIFRleHRDb21wb25lbnQgfSBmcm9tICdvYnNpZGlhbic7XG5cbmltcG9ydCB7IEFJU2VydmljZSB9IGZyb20gJy4vc3JjL3NlcnZpY2VzL0FJU2VydmljZSc7XG5cbmludGVyZmFjZSBQcm92aWRlckNvbmZpZyB7XG5cdGRlZmF1bHRVcmw6IHN0cmluZztcblx0ZGVmYXVsdE1vZGVsOiBzdHJpbmc7XG5cdG1vZGVsczogc3RyaW5nW107XG59XG5cbmludGVyZmFjZSBQcm92aWRlckNvbmZpZ3Mge1xuXHRba2V5OiBzdHJpbmddOiBQcm92aWRlckNvbmZpZztcbn1cblxuY29uc3QgUFJPVklERVJfQ09ORklHUzogUHJvdmlkZXJDb25maWdzID0ge1xuXHRvcGVuYWk6IHtcblx0XHRkZWZhdWx0VXJsOiAnaHR0cHM6Ly9hcGkub3BlbmFpLmNvbS92MS9jaGF0L2NvbXBsZXRpb25zJyxcblx0XHRkZWZhdWx0TW9kZWw6ICdncHQtMy41LXR1cmJvJyxcblx0XHRtb2RlbHM6IFsnZ3B0LTMuNS10dXJibycsICdncHQtNCddXG5cdH0sXG5cdGdlbWluaToge1xuXHRcdGRlZmF1bHRVcmw6ICdodHRwczovL2dlbmVyYXRpdmVsYW5ndWFnZS5nb29nbGVhcGlzLmNvbS92MWJldGEvbW9kZWxzJyxcblx0XHRkZWZhdWx0TW9kZWw6ICdnZW1pbmktcHJvJyxcblx0XHRtb2RlbHM6IFsnZ2VtaW5pLXBybyddXG5cdH0sXG5cdGNsYXVkZToge1xuXHRcdGRlZmF1bHRVcmw6ICdodHRwczovL2FwaS5hbnRocm9waWMuY29tL3YxL21lc3NhZ2VzJyxcblx0XHRkZWZhdWx0TW9kZWw6ICdjbGF1ZGUtMy1vcHVzLTIwMjQwMjI5Jyxcblx0XHRtb2RlbHM6IFsnY2xhdWRlLTMtb3B1cy0yMDI0MDIyOScsICdjbGF1ZGUtMy1zb25uZXQtMjAyNDAyMjknXVxuXHR9LFxuXHRkZWVwc2Vlazoge1xuXHRcdGRlZmF1bHRVcmw6ICdodHRwczovL2FwaS5kZWVwc2Vlay5jb20vdjEvY2hhdC9jb21wbGV0aW9ucycsXG5cdFx0ZGVmYXVsdE1vZGVsOiAnZGVlcHNlZWstY2hhdCcsXG5cdFx0bW9kZWxzOiBbJ2RlZXBzZWVrLWNoYXQnXVxuXHR9LFxuXHR2b2xjYW5vOiB7XG5cdFx0ZGVmYXVsdFVybDogJ2h0dHBzOi8vYXJrLmNuLWJlaWppbmcudm9sY2VzLmNvbS9hcGkvdjMvY2hhdC9jb21wbGV0aW9ucycsXG5cdFx0ZGVmYXVsdE1vZGVsOiAndm9sY2VuZ2luZScsXG5cdFx0bW9kZWxzOiBbJ3ZvbGNlbmdpbmUnXVxuXHR9LFxuXHRvbGxhbWE6IHtcblx0XHRkZWZhdWx0VXJsOiAnaHR0cDovL2xvY2FsaG9zdDoxMTQzNC92MS9jaGF0L2NvbXBsZXRpb25zJyxcblx0XHRkZWZhdWx0TW9kZWw6ICdsbGFtYTMnLFxuXHRcdG1vZGVsczogWydsbGFtYTMnLCAncGhpMycsICdxd2VuMicsICdtaXN0cmFsJ11cblx0fVxufTtcblxuaW50ZXJmYWNlIFByb3ZpZGVyU2V0dGluZ3Mge1xuXHRhcGlLZXk6IHN0cmluZztcblx0YXBpVXJsOiBzdHJpbmc7XG5cdG1vZGVsOiBzdHJpbmc7XG5cdGN1c3RvbU1vZGVsPzogc3RyaW5nO1xufVxuXG5pbnRlcmZhY2UgQUlTZXJ2aWNlQ29uZmlnIHtcblx0YXBpS2V5OiBzdHJpbmc7XG5cdGFwaVVybDogc3RyaW5nO1xuXHRtb2RlbDogc3RyaW5nO1xuXHRjdXN0b21Qcm9tcHQ/OiBzdHJpbmc7XG59XG5cbmludGVyZmFjZSBBdXRvVGFnZ2VyU2V0dGluZ3Mge1xuXHRwcm92aWRlcjogc3RyaW5nO1xuXHRwcm92aWRlclNldHRpbmdzOiB7XG5cdFx0W2tleTogc3RyaW5nXTogUHJvdmlkZXJTZXR0aW5ncztcblx0fTtcblx0Y3VzdG9tUHJvbXB0OiBzdHJpbmc7XG59XG5cbmNvbnN0IERFRkFVTFRfU0VUVElOR1M6IEF1dG9UYWdnZXJTZXR0aW5ncyA9IHtcblx0cHJvdmlkZXI6ICdvcGVuYWknLFxuXHRwcm92aWRlclNldHRpbmdzOiB7XG5cdFx0b3BlbmFpOiB7XG5cdFx0XHRhcGlLZXk6ICcnLFxuXHRcdFx0YXBpVXJsOiBQUk9WSURFUl9DT05GSUdTLm9wZW5haS5kZWZhdWx0VXJsLFxuXHRcdFx0bW9kZWw6IFBST1ZJREVSX0NPTkZJR1Mub3BlbmFpLmRlZmF1bHRNb2RlbFxuXHRcdH0sXG5cdFx0Z2VtaW5pOiB7XG5cdFx0XHRhcGlLZXk6ICcnLFxuXHRcdFx0YXBpVXJsOiBQUk9WSURFUl9DT05GSUdTLmdlbWluaS5kZWZhdWx0VXJsLFxuXHRcdFx0bW9kZWw6IFBST1ZJREVSX0NPTkZJR1MuZ2VtaW5pLmRlZmF1bHRNb2RlbFxuXHRcdH0sXG5cdFx0Y2xhdWRlOiB7XG5cdFx0XHRhcGlLZXk6ICcnLFxuXHRcdFx0YXBpVXJsOiBQUk9WSURFUl9DT05GSUdTLmNsYXVkZS5kZWZhdWx0VXJsLFxuXHRcdFx0bW9kZWw6IFBST1ZJREVSX0NPTkZJR1MuY2xhdWRlLmRlZmF1bHRNb2RlbFxuXHRcdH0sXG5cdFx0ZGVlcHNlZWs6IHtcblx0XHRcdGFwaUtleTogJycsXG5cdFx0XHRhcGlVcmw6IFBST1ZJREVSX0NPTkZJR1MuZGVlcHNlZWsuZGVmYXVsdFVybCxcblx0XHRcdG1vZGVsOiBQUk9WSURFUl9DT05GSUdTLmRlZXBzZWVrLmRlZmF1bHRNb2RlbFxuXHRcdH0sXG5cdFx0dm9sY2Fubzoge1xuXHRcdFx0YXBpS2V5OiAnJyxcblx0XHRcdGFwaVVybDogUFJPVklERVJfQ09ORklHUy52b2xjYW5vLmRlZmF1bHRVcmwsXG5cdFx0XHRtb2RlbDogUFJPVklERVJfQ09ORklHUy52b2xjYW5vLmRlZmF1bHRNb2RlbFxuXHRcdH0sXG5cdFx0b2xsYW1hOiB7XG5cdFx0XHRhcGlLZXk6ICcnLFxuXHRcdFx0YXBpVXJsOiBQUk9WSURFUl9DT05GSUdTLm9sbGFtYS5kZWZhdWx0VXJsLFxuXHRcdFx0bW9kZWw6IFBST1ZJREVSX0NPTkZJR1Mub2xsYW1hLmRlZmF1bHRNb2RlbFxuXHRcdH1cblx0fSxcblx0Y3VzdG9tUHJvbXB0OiAnJ1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQXV0b1RhZ2dlclBsdWdpbiBleHRlbmRzIFBsdWdpbiB7XG5cdHNldHRpbmdzOiBBdXRvVGFnZ2VyU2V0dGluZ3M7XG5cdGV4aXN0aW5nVGFnczogU2V0PHN0cmluZz4gPSBuZXcgU2V0KCk7IC8vIFx1NUI1OFx1NTBBOFx1NjI0MFx1NjcwOVx1NURGMlx1NjcwOVx1NjgwN1x1N0I3RVxuXG5cdGFzeW5jIG9ubG9hZCgpIHtcblx0XHRhd2FpdCB0aGlzLmxvYWRTZXR0aW5ncygpO1xuXHRcdGF3YWl0IHRoaXMubG9hZEV4aXN0aW5nVGFncygpOyAvLyBcdTUyQTBcdThGN0RcdTVERjJcdTY3MDlcdTY4MDdcdTdCN0VcblxuXHRcdHRoaXMuYWRkUmliYm9uSWNvbigndGFnJywgJ1x1NzUxRlx1NjIxMFx1NjgwN1x1N0I3RScsIGFzeW5jICgpID0+IHtcblx0XHRcdGF3YWl0IHRoaXMuZ2VuZXJhdGVUYWdzKCk7XG5cdFx0fSk7XG5cblx0XHR0aGlzLmFkZFNldHRpbmdUYWIobmV3IEF1dG9UYWdnZXJTZXR0aW5nVGFiKHRoaXMuYXBwLCB0aGlzKSk7XG5cblx0XHR0aGlzLnJlZ2lzdGVyRXZlbnQoXG5cdFx0XHR0aGlzLmFwcC52YXVsdC5vbigncmVuYW1lJywgKCkgPT4gdGhpcy5sb2FkRXhpc3RpbmdUYWdzKCkpXG5cdFx0KTtcblx0XHR0aGlzLnJlZ2lzdGVyRXZlbnQoXG5cdFx0XHR0aGlzLmFwcC52YXVsdC5vbignZGVsZXRlJywgKCkgPT4gdGhpcy5sb2FkRXhpc3RpbmdUYWdzKCkpXG5cdFx0KTtcblx0XHR0aGlzLnJlZ2lzdGVyRXZlbnQoXG5cdFx0XHR0aGlzLmFwcC52YXVsdC5vbignY3JlYXRlJywgKCkgPT4gdGhpcy5sb2FkRXhpc3RpbmdUYWdzKCkpXG5cdFx0KTtcblx0fVxuXG5cdGFzeW5jIGxvYWRTZXR0aW5ncygpIHtcblx0XHR0aGlzLnNldHRpbmdzID0gT2JqZWN0LmFzc2lnbih7fSwgREVGQVVMVF9TRVRUSU5HUywgYXdhaXQgdGhpcy5sb2FkRGF0YSgpKTtcblx0fVxuXG5cdGFzeW5jIHNhdmVTZXR0aW5ncygpIHtcblx0XHRhd2FpdCB0aGlzLnNhdmVEYXRhKHRoaXMuc2V0dGluZ3MpO1xuXHR9XG5cblx0Ly8gXHU2NkZGXHU2MzYyXHU2ODA3XHU3QjdFXHU2M0QwXHU1M0Q2XHU5MDNCXHU4RjkxXHVGRjBDXHU2M0QwXHU1M0Q2IGZyb250bWF0dGVyIFx1NTQ4Q1x1NkI2M1x1NjU4N1x1NjI0MFx1NjcwOVx1NjgwN1x1N0I3RVxuXHRhc3luYyBsb2FkRXhpc3RpbmdUYWdzKCkge1xuXHRcdHRoaXMuZXhpc3RpbmdUYWdzID0gbmV3IFNldDxzdHJpbmc+KCk7XG5cdFx0Y29uc3QgZmlsZXMgPSB0aGlzLmFwcC52YXVsdC5nZXRNYXJrZG93bkZpbGVzKCk7XG5cdFx0Zm9yIChjb25zdCBmaWxlIG9mIGZpbGVzKSB7XG5cdFx0XHRjb25zdCBjYWNoZSA9IHRoaXMuYXBwLm1ldGFkYXRhQ2FjaGUuZ2V0RmlsZUNhY2hlKGZpbGUpO1xuXHRcdFx0Ly8gMS4gZnJvbnRtYXR0ZXIgdGFnc1xuXHRcdFx0aWYgKGNhY2hlPy5mcm9udG1hdHRlciAmJiBjYWNoZS5mcm9udG1hdHRlci50YWdzKSB7XG5cdFx0XHRcdGNvbnN0IHRhZ3MgPSBBcnJheS5pc0FycmF5KGNhY2hlLmZyb250bWF0dGVyLnRhZ3MpXG5cdFx0XHRcdFx0PyBjYWNoZS5mcm9udG1hdHRlci50YWdzXG5cdFx0XHRcdFx0OiBbY2FjaGUuZnJvbnRtYXR0ZXIudGFnc107XG5cdFx0XHRcdHRhZ3MuZm9yRWFjaCh0YWcgPT4gdGhpcy5leGlzdGluZ1RhZ3MuYWRkKHRhZykpO1xuXHRcdFx0fVxuXHRcdFx0Ly8gMi4gaW5saW5lIHRhZ3Ncblx0XHRcdGlmIChjYWNoZT8udGFncykge1xuXHRcdFx0XHRjYWNoZS50YWdzLmZvckVhY2godGFnT2JqID0+IHRoaXMuZXhpc3RpbmdUYWdzLmFkZCh0YWdPYmoudGFnLnJlcGxhY2UoL14jLywgJycpKSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gXHU2N0U1XHU2MjdFXHU2NzAwXHU3NkY4XHU1MTczXHU3Njg0XHU1REYyXHU2NzA5XHU2ODA3XHU3QjdFXG5cdGZpbmRSZWxldmFudEV4aXN0aW5nVGFncyhjb250ZW50OiBzdHJpbmcpOiBzdHJpbmdbXSB7XG5cdFx0Y29uc3QgcmVsZXZhbnRUYWdzOiBzdHJpbmdbXSA9IFtdO1xuXHRcdGNvbnN0IGNvbnRlbnRMb3dlciA9IGNvbnRlbnQudG9Mb3dlckNhc2UoKTtcblx0XHRcblx0XHQvLyBcdTVDMDZcdTUxODVcdTVCQjlcdTUyMDZcdThCQ0RcdUZGMDhcdTdCODBcdTUzNTVcdTVCOUVcdTczQjBcdUZGMENcdTUzRUZcdTRFRTVcdTY1MzlcdThGREJcdUZGMDlcblx0XHRjb25zdCB3b3JkcyA9IGNvbnRlbnRMb3dlci5zcGxpdCgvW1xccyxcdUZGMEMuXHUzMDAyIVx1RkYwMT9cdUZGMUY7XHVGRjFCOlx1RkYxQV0vKTtcblx0XHRcblx0XHQvLyBcdTkwNERcdTUzODZcdTVERjJcdTY3MDlcdTY4MDdcdTdCN0VcdUZGMENcdTY3RTVcdTYyN0VcdTUzMzlcdTkxNERcdTc2ODRcblx0XHRmb3IgKGNvbnN0IHRhZyBvZiB0aGlzLmV4aXN0aW5nVGFncykge1xuXHRcdFx0Y29uc3QgdGFnTG93ZXIgPSB0YWcudG9Mb3dlckNhc2UoKTtcblx0XHRcdC8vIFx1NTk4Mlx1Njc5Q1x1NjgwN1x1N0I3RVx1NTcyOFx1NTE4NVx1NUJCOVx1NEUyRFx1NTFGQVx1NzNCMFx1RkYwQ1x1NjIxNlx1ODAwNVx1NTE4NVx1NUJCOVx1NEUyRFx1NzY4NFx1OEJDRFx1NTcyOFx1NjgwN1x1N0I3RVx1NEUyRFx1NTFGQVx1NzNCMFxuXHRcdFx0aWYgKGNvbnRlbnRMb3dlci5pbmNsdWRlcyh0YWdMb3dlcikgfHwgd29yZHMuc29tZSh3b3JkID0+IHRhZ0xvd2VyLmluY2x1ZGVzKHdvcmQpKSkge1xuXHRcdFx0XHRyZWxldmFudFRhZ3MucHVzaCh0YWcpO1xuXHRcdFx0XHRpZiAocmVsZXZhbnRUYWdzLmxlbmd0aCA+PSAyKSBicmVhazsgLy8gXHU2NzAwXHU1OTFBXHU4RkQ0XHU1NkRFMlx1NEUyQVx1NzZGOFx1NTE3M1x1NjgwN1x1N0I3RVxuXHRcdFx0fVxuXHRcdH1cblx0XHRcblx0XHRyZXR1cm4gcmVsZXZhbnRUYWdzO1xuXHR9XG5cblx0YXN5bmMgZ2VuZXJhdGVUYWdzKCkge1xuXHRcdGNvbnN0IGFjdGl2ZVZpZXcgPSB0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0QWN0aXZlVmlld09mVHlwZShNYXJrZG93blZpZXcpO1xuXHRcdGlmICghYWN0aXZlVmlldykge1xuXHRcdFx0bmV3IE5vdGljZSgnXHU4QkY3XHU2MjUzXHU1RjAwXHU0RTAwXHU0RTJBXHU2NTg3XHU2ODYzXHU0RUU1XHU3NTFGXHU2MjEwXHU2ODA3XHU3QjdFJyk7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Y29uc3QgZmlsZSA9IGFjdGl2ZVZpZXcuZmlsZTtcblx0XHRjb25zdCBjb250ZW50ID0gYXdhaXQgdGhpcy5hcHAudmF1bHQucmVhZChmaWxlKTtcblxuXHRcdGNvbnN0IGxvYWRpbmdOb3RpY2UgPSBuZXcgTm90aWNlKCdcdTZCNjNcdTU3MjhcdTc1MUZcdTYyMTBcdTY4MDdcdTdCN0UuLi4nLCAwKTtcblxuXHRcdHRyeSB7XG5cdFx0XHRjb25zdCB0YWdzID0gYXdhaXQgdGhpcy5hbmFseXplVGFncyhjb250ZW50KTtcblx0XHRcdGxvYWRpbmdOb3RpY2UuaGlkZSgpO1xuXHRcdFx0bmV3IFRhZ1NlbGVjdGlvbk1vZGFsKHRoaXMuYXBwLCB0YWdzLCBhc3luYyAoc2VsZWN0ZWRUYWdzKSA9PiB7XG5cdFx0XHRcdGF3YWl0IHRoaXMudXBkYXRlRmlsZUZyb250TWF0dGVyKGZpbGUsIHNlbGVjdGVkVGFncyk7XG5cdFx0XHR9KS5vcGVuKCk7XG5cdFx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRcdGxvYWRpbmdOb3RpY2UuaGlkZSgpO1xuXHRcdFx0bmV3IE5vdGljZShgXHU3NTFGXHU2MjEwXHU2ODA3XHU3QjdFXHU1OTMxXHU4RDI1XHVGRjFBJHtlcnJvci5tZXNzYWdlfWApO1xuXHRcdH1cblx0fVxuXG5cdGFzeW5jIGFuYWx5emVUYWdzKGNvbnRlbnQ6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nW10+IHtcblx0XHRjb25zdCBwcm92aWRlciA9IHRoaXMuc2V0dGluZ3MucHJvdmlkZXI7XG5cdFx0Y29uc3QgcHJvdmlkZXJDb25maWcgPSB0aGlzLnNldHRpbmdzLnByb3ZpZGVyU2V0dGluZ3NbcHJvdmlkZXJdO1xuXG5cdFx0Ly8gXHU2NjdBXHU4MEZEXHU2ODA3XHU3QjdFXHU2M0E4XHU4MzUwXHVGRjFBXHU1QzA2XHU2MjQwXHU2NzA5XHU1REYyXHU2NzA5XHU2ODA3XHU3QjdFXHU1NDhDXHU1MTg1XHU1QkI5XHU0RTAwXHU4RDc3XHU1M0QxXHU3RUQ5IEFJXG5cdFx0aWYgKCFwcm92aWRlckNvbmZpZykge1xuXHRcdFx0bmV3IE5vdGljZSgnQUkgVGFncyBcdTkxNERcdTdGNkVcdTk1MTlcdThCRUZcdUZGMUFcdTY3MkFcdTYyN0VcdTUyMzBcdTVGNTNcdTUyNERcdTY3MERcdTUyQTFcdTU1NDZcdTc2ODRcdTkxNERcdTdGNkVcdUZGMENcdThCRjdcdTkxQ0RcdTY1QjBcdTRGRERcdTVCNThcdThCQkVcdTdGNkVcdTMwMDInKTtcblx0XHRcdHJldHVybiBbXTtcblx0XHR9XG5cdFx0aWYgKCFwcm92aWRlckNvbmZpZy5hcGlVcmwgfHwgIXByb3ZpZGVyQ29uZmlnLm1vZGVsKSB7XG5cdFx0XHRuZXcgTm90aWNlKCdBSSBUYWdzIFx1OTE0RFx1N0Y2RVx1OTUxOVx1OEJFRlx1RkYxQUFQSSBcdTU3MzBcdTU3NDBcdTYyMTZcdTZBMjFcdTU3OEJcdTY3MkFcdThCQkVcdTdGNkVcdUZGMENcdThCRjdcdTU3MjhcdThCQkVcdTdGNkVcdTRFMkRcdTg4NjVcdTUxNjhcdTMwMDInKTtcblx0XHRcdHJldHVybiBbXTtcblx0XHR9XG5cblx0XHQvLyBcdTY3ODRcdTkwMjBcdTY2N0FcdTgwRkQgcHJvbXB0XG5cdFx0Y29uc3QgYWxsRXhpc3RpbmdUYWdzID0gQXJyYXkuZnJvbSh0aGlzLmV4aXN0aW5nVGFncyk7XG5cdFx0Y29uc3Qgc21hcnRQcm9tcHQgPVxuXHRcdFx0YFx1NEY2MFx1NjYyRlx1NEUwMFx1NEUyQVx1NjU4N1x1Njg2M1x1NjgwN1x1N0I3RVx1NzUxRlx1NjIxMFx1NTY2OFx1MzAwMlx1OEJGN1x1NjgzOVx1NjM2RVx1NEVFNVx1NEUwQlx1NjU4N1x1Njg2M1x1NTE4NVx1NUJCOVx1NTQ4Q1x1NURGMlx1NjcwOVx1NjgwN1x1N0I3RVx1NTIxN1x1ODg2OFx1RkYwQ1x1NEYxOFx1NTE0OFx1NEVDRVx1NURGMlx1NjcwOVx1NjgwN1x1N0I3RVx1NEUyRFx1NjMxMVx1OTAwOTEtMlx1NEUyQVx1NjcwMFx1NzZGOFx1NTE3M1x1NzY4NFx1NjgwN1x1N0I3RVx1RkYwQ1x1NTE4RFx1ODg2NVx1NTE0NVx1NjVCMFx1NjgwN1x1N0I3RVx1NEY3Rlx1NjAzQlx1NjU3MFx1OEZCRVx1NTIzMDNcdTRFMkFcdTMwMDJcdTU5ODJcdTY3OUNcdTZDQTFcdTY3MDlcdTU0MDhcdTkwMDJcdTc2ODRcdTVERjJcdTY3MDlcdTY4MDdcdTdCN0VcdUZGMENcdTUzRUZcdTRFRTVcdTUxNjhcdTkwRThcdTY1QjBcdTc1MUZcdTYyMTBcdTMwMDJcdTUzRUFcdThGRDRcdTU2REVcdTY4MDdcdTdCN0VcdUZGMENcdTc1MjhcdTkwMTdcdTUzRjdcdTUyMDZcdTk2OTRcdUZGMENcdTRFMERcdTg5ODFcdTUzMDVcdTU0MkJcdTUxNzZcdTRFRDZcdTUxODVcdTVCQjlcdTMwMDJcXG5cXG5gICtcblx0XHRcdGBcdTY1ODdcdTY4NjNcdTUxODVcdTVCQjlcdUZGMUFcXG4ke2NvbnRlbnR9XFxuXFxuYCArXG5cdFx0XHRgXHU1REYyXHU2NzA5XHU2ODA3XHU3QjdFXHU1MjE3XHU4ODY4XHVGRjFBXFxuJHthbGxFeGlzdGluZ1RhZ3Muam9pbignLCAnKX1cXG5gO1xuXG5cdFx0Y29uc3QgY29uZmlnOiBBSVNlcnZpY2VDb25maWcgPSB7XG5cdFx0XHRhcGlLZXk6IHByb3ZpZGVyQ29uZmlnLmFwaUtleSxcblx0XHRcdGFwaVVybDogcHJvdmlkZXJDb25maWcuYXBpVXJsLFxuXHRcdFx0bW9kZWw6IHByb3ZpZGVyQ29uZmlnLm1vZGVsLFxuXHRcdFx0Y3VzdG9tUHJvbXB0OiBzbWFydFByb21wdFxuXHRcdH07XG5cdFx0Y29uc3QgYWlTZXJ2aWNlID0gbmV3IEFJU2VydmljZShjb25maWcpO1xuXHRcdHRyeSB7XG5cdFx0XHRjb25zdCByZXN1bHQgPSBhd2FpdCBhaVNlcnZpY2UuZ2VuZXJhdGVUYWdzKGNvbnRlbnQpO1xuXHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHR9IGNhdGNoIChlcnJvcikge1xuXHRcdFx0bmV3IE5vdGljZSgnQUkgVGFncyBcdTc1MUZcdTYyMTBcdTY4MDdcdTdCN0VcdTY1RjZcdTUxRkFcdTk1MTlcdUZGMENcdThCRjdcdTY4QzBcdTY3RTVcdTYzQTdcdTUyMzZcdTUzRjBcdTY1RTVcdTVGRDdcdTMwMDInKTtcblx0XHRcdHJldHVybiBbXTtcblx0XHR9XG5cdH1cblxuXHRhc3luYyB1cGRhdGVGaWxlRnJvbnRNYXR0ZXIoZmlsZTogVEZpbGUsIG5ld1RhZ3M6IHN0cmluZ1tdKSB7XG5cdFx0Y29uc3QgY29udGVudCA9IGF3YWl0IHRoaXMuYXBwLnZhdWx0LnJlYWQoZmlsZSk7XG5cblx0XHRjb25zdCB5YW1sUmVnZXggPSAvXi0tLVxcbihbXFxzXFxTXSo/KVxcbi0tLS87XG5cdFx0Y29uc3QgaGFzWWFtbCA9IHlhbWxSZWdleC50ZXN0KGNvbnRlbnQpO1xuXG5cdFx0bGV0IG5ld0NvbnRlbnQ7XG5cdFx0aWYgKGhhc1lhbWwpIHtcblx0XHRcdGNvbnN0IHlhbWxNYXRjaCA9IGNvbnRlbnQubWF0Y2goeWFtbFJlZ2V4KTtcblx0XHRcdGNvbnN0IHlhbWwgPSB5YW1sTWF0Y2hbMV07XG5cdFx0XHRjb25zdCB0YWdzUmVnZXggPSAvXnRhZ3M6XFxzKlxcWyguKilcXF0vbTtcblx0XHRcdGNvbnN0IHRhZ3NNYXRjaCA9IHlhbWwubWF0Y2godGFnc1JlZ2V4KTtcblxuXHRcdFx0aWYgKHRhZ3NNYXRjaCkge1xuXHRcdFx0XHRjb25zdCBleGlzdGluZ1RhZ3NTdHIgPSB0YWdzTWF0Y2hbMV07XG5cdFx0XHRcdGNvbnN0IGV4aXN0aW5nVGFncyA9IGV4aXN0aW5nVGFnc1N0clxuXHRcdFx0XHRcdC5zcGxpdCgnLCcpXG5cdFx0XHRcdFx0Lm1hcCh0YWcgPT4gdGFnLnRyaW0oKSlcblx0XHRcdFx0XHQuZmlsdGVyKHRhZyA9PiB0YWcgIT09ICcnKTtcblxuXHRcdFx0XHRjb25zdCBhbGxUYWdzID0gWy4uLm5ldyBTZXQoWy4uLmV4aXN0aW5nVGFncywgLi4ubmV3VGFnc10pXTtcblxuXHRcdFx0XHRuZXdDb250ZW50ID0gY29udGVudC5yZXBsYWNlKHRhZ3NSZWdleCwgYHRhZ3M6IFske2FsbFRhZ3Muam9pbignLCAnKX1dYCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRuZXdDb250ZW50ID0gY29udGVudC5yZXBsYWNlKHlhbWxSZWdleCwgYC0tLVxcbiR7eWFtbH1cXG50YWdzOiBbJHtuZXdUYWdzLmpvaW4oJywgJyl9XVxcbi0tLWApO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRuZXdDb250ZW50ID0gYC0tLVxcbnRhZ3M6IFske25ld1RhZ3Muam9pbignLCAnKX1dXFxuLS0tXFxuXFxuJHtjb250ZW50fWA7XG5cdFx0fVxuXG5cdFx0YXdhaXQgdGhpcy5hcHAudmF1bHQubW9kaWZ5KGZpbGUsIG5ld0NvbnRlbnQpO1xuXHRcdG5ldyBOb3RpY2UoYFx1NURGMlx1NjIxMFx1NTI5Rlx1NkRGQlx1NTJBMFx1NjgwN1x1N0I3RVx1RkYxQSR7bmV3VGFncy5qb2luKCcsICcpfWApO1xuXHR9XG59XG5cbmNsYXNzIFRhZ1NlbGVjdGlvbk1vZGFsIGV4dGVuZHMgTW9kYWwge1xuXHR0YWdzOiBzdHJpbmdbXTtcblx0b25TdWJtaXQ6ICh0YWdzOiBzdHJpbmdbXSkgPT4gdm9pZDtcblx0c2VsZWN0ZWRUYWdzOiBzdHJpbmdbXTtcblxuXHRjb25zdHJ1Y3RvcihhcHA6IEFwcCwgdGFnczogc3RyaW5nW10sIG9uU3VibWl0OiAodGFnczogc3RyaW5nW10pID0+IHZvaWQpIHtcblx0XHRzdXBlcihhcHApO1xuXHRcdHRoaXMudGFncyA9IHRhZ3M7XG5cdFx0dGhpcy5vblN1Ym1pdCA9IG9uU3VibWl0O1xuXHRcdHRoaXMuc2VsZWN0ZWRUYWdzID0gWy4uLnRhZ3NdO1xuXHR9XG5cblx0b25PcGVuKCkge1xuXHRcdGNvbnN0IHsgY29udGVudEVsIH0gPSB0aGlzO1xuXG5cdFx0Y29udGVudEVsLmNyZWF0ZUVsKCdoMycsIHsgdGV4dDogJ1x1NjgwN1x1N0I3RVx1NzUxRlx1NjIxMCcgfSk7XG5cblx0XHRjb25zdCB0YWdDb250YWluZXIgPSBjb250ZW50RWwuY3JlYXRlRGl2KHsgY2xzOiAndGFnLWNvbnRhaW5lcicgfSk7XG5cblx0XHR0aGlzLnRhZ3MuZm9yRWFjaCgodGFnLCBpbmRleCkgPT4ge1xuXHRcdFx0Y29uc3QgdGFnUm93ID0gdGFnQ29udGFpbmVyLmNyZWF0ZURpdih7IGNsczogJ3RhZy1yb3cnIH0pO1xuXG5cdFx0XHRjb25zdCBjaGVja2JveCA9IHRhZ1Jvdy5jcmVhdGVFbCgnaW5wdXQnLCB7XG5cdFx0XHRcdHR5cGU6ICdjaGVja2JveCcsXG5cdFx0XHRcdGF0dHI6IHsgY2hlY2tlZDogdHJ1ZSB9XG5cdFx0XHR9KTtcblxuXHRcdFx0Y29uc3QgdGFnSW5wdXQgPSB0YWdSb3cuY3JlYXRlRWwoJ2lucHV0Jywge1xuXHRcdFx0XHR0eXBlOiAndGV4dCcsXG5cdFx0XHRcdHZhbHVlOiB0YWdcblx0XHRcdH0pO1xuXG5cdFx0XHRjaGVja2JveC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCAoKSA9PiB7XG5cdFx0XHRcdGlmIChjaGVja2JveC5jaGVja2VkKSB7XG5cdFx0XHRcdFx0dGhpcy5zZWxlY3RlZFRhZ3NbaW5kZXhdID0gdGFnSW5wdXQudmFsdWU7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dGhpcy5zZWxlY3RlZFRhZ3NbaW5kZXhdID0gbnVsbDtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cblx0XHRcdHRhZ0lucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgKCkgPT4ge1xuXHRcdFx0XHRpZiAoY2hlY2tib3guY2hlY2tlZCkge1xuXHRcdFx0XHRcdHRoaXMuc2VsZWN0ZWRUYWdzW2luZGV4XSA9IHRhZ0lucHV0LnZhbHVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9KTtcblxuXHRcdGNvbnN0IGJ1dHRvbkNvbnRhaW5lciA9IGNvbnRlbnRFbC5jcmVhdGVEaXYoeyBjbHM6ICdidXR0b24tY29udGFpbmVyJyB9KTtcblxuXHRcdGJ1dHRvbkNvbnRhaW5lci5jcmVhdGVFbCgnYnV0dG9uJywgeyB0ZXh0OiAnXHU1M0Q2XHU2RDg4JyB9KS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcblx0XHRcdHRoaXMuY2xvc2UoKTtcblx0XHR9KTtcblxuXHRcdGJ1dHRvbkNvbnRhaW5lci5jcmVhdGVFbCgnYnV0dG9uJywgeyB0ZXh0OiAnXHU3ODZFXHU1QjlBJyB9KS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcblx0XHRcdGNvbnN0IGZpbmFsVGFncyA9IHRoaXMuc2VsZWN0ZWRUYWdzLmZpbHRlcih0YWcgPT4gdGFnICE9PSBudWxsKTtcblx0XHRcdHRoaXMub25TdWJtaXQoZmluYWxUYWdzKTtcblx0XHRcdHRoaXMuY2xvc2UoKTtcblx0XHR9KTtcblx0fVxuXG5cdG9uQ2xvc2UoKSB7XG5cdFx0Y29uc3QgeyBjb250ZW50RWwgfSA9IHRoaXM7XG5cdFx0Y29udGVudEVsLmVtcHR5KCk7XG5cdH1cbn1cblxuY2xhc3MgQXV0b1RhZ2dlclNldHRpbmdUYWIgZXh0ZW5kcyBQbHVnaW5TZXR0aW5nVGFiIHtcblx0cGx1Z2luOiBBdXRvVGFnZ2VyUGx1Z2luO1xuXG5cdGNvbnN0cnVjdG9yKGFwcDogQXBwLCBwbHVnaW46IEF1dG9UYWdnZXJQbHVnaW4pIHtcblx0XHRzdXBlcihhcHAsIHBsdWdpbik7XG5cdFx0dGhpcy5wbHVnaW4gPSBwbHVnaW47XG5cdH1cblxuXHRkaXNwbGF5KCk6IHZvaWQge1xuXHRcdGNvbnN0IHsgY29udGFpbmVyRWwgfSA9IHRoaXM7XG5cdFx0Y29udGFpbmVyRWwuZW1wdHkoKTtcblxuXHRcdGNvbnRhaW5lckVsLmNyZWF0ZUVsKCdoMycsIHsgdGV4dDogJ1x1ODFFQVx1NTJBOFx1NjgwN1x1N0I3RVx1NzUxRlx1NjIxMFx1OEJCRVx1N0Y2RScgfSk7XG5cblx0XHQvLyBcdTZERkJcdTUyQTAgR2l0SHViIFx1OTRGRVx1NjNBNVxuXHRcdGNvbnN0IGdpdGh1YkxpbmsgPSBjb250YWluZXJFbC5jcmVhdGVFbCgnYScsIHtcblx0XHRcdHRleHQ6ICdcdTU3MjggR2l0SHViIFx1NEUwQVx1NjNEMFx1NEVBNFx1NTNDRFx1OTk4OCcsXG5cdFx0XHRocmVmOiAnaHR0cHM6Ly9naXRodWIuY29tL2Rsem1vZS9vYnNpZGlhbi1haS10YWdzJ1xuXHRcdH0pO1xuXHRcdGdpdGh1YkxpbmsuYWRkQ2xhc3MoJ3NldHRpbmctaXRlbS1kZXNjcmlwdGlvbicpO1xuXHRcdGdpdGh1YkxpbmsuYWRkQ2xhc3MoJ2dpdGh1Yi1mZWVkYmFjay1saW5rJyk7XG5cblx0XHQvLyBcdTZERkJcdTUyQTBcdTYzRDBcdTRGOUJcdTU1NDZcdThCRjRcdTY2MEVcblx0XHRjb25zdCBwcm92aWRlckRlc2NyaXB0aW9ucyA9IHtcblx0XHRcdG9wZW5haTogW1xuXHRcdFx0XHQnT3BlbkFJJyxcblx0XHRcdFx0J1x1MjAyMiBBUEkgXHU1NzMwXHU1NzQwXHVGRjFBaHR0cHM6Ly9hcGkub3BlbmFpLmNvbS92MS9jaGF0L2NvbXBsZXRpb25zJyxcblx0XHRcdFx0J1x1MjAyMiBcdTY1MkZcdTYzMDFcdTZBMjFcdTU3OEJcdUZGMUFncHQtNG8tbWluaSwgZ3B0LTRvLCBncHQtMy41LXR1cmJvJ1xuXHRcdFx0XSxcblx0XHRcdGdlbWluaTogW1xuXHRcdFx0XHQnR2VtaW5pJyxcblx0XHRcdFx0J1x1MjAyMiBBUEkgXHU1NzMwXHU1NzQwXHVGRjFBaHR0cHM6Ly9nZW5lcmF0aXZlbGFuZ3VhZ2UuZ29vZ2xlYXBpcy5jb21cdUZGMDhcdTY2ODJcdTRFMERcdTY1MkZcdTYzMDFcdTRFRTNcdTc0MDZcdTU3MzBcdTU3NDBcdUZGMDknLFxuXHRcdFx0XHQnXHUyMDIyIFx1NjUyRlx1NjMwMVx1NkEyMVx1NTc4Qlx1RkYxQWdlbWluaS0xLjUtZmxhc2gsIGdlbWluaS0yLjAtZmxhc2gnXG5cdFx0XHRdLFxuXHRcdFx0Y2xhdWRlOiBbXG5cdFx0XHRcdCdDbGF1ZGUnLFxuXHRcdFx0XHQnXHUyMDIyIEFQSSBcdTU3MzBcdTU3NDBcdUZGMUFodHRwczovL2FwaS5hbnRocm9waWMuY29tL3YxL21lc3NhZ2VzJyxcblx0XHRcdFx0J1x1MjAyMiBcdTY1MkZcdTYzMDFcdTZBMjFcdTU3OEJcdUZGMUFjbGF1ZGUtMy01LXNvbm5ldCwgY2xhdWRlLTMtNy1zb25uZXQsIGNsYXVkZS0zLW9wdXMsIGNsYXVkZS0zLWhhaWt1J1xuXHRcdFx0XSxcblx0XHRcdGRlZXBzZWVrOiBbXG5cdFx0XHRcdCdEZWVwU2VlayAtIFx1NkRGMVx1NUVBNlx1NkM0Mlx1N0QyMicsXG5cdFx0XHRcdCdcdTIwMjIgQVBJIFx1NTczMFx1NTc0MFx1RkYxQWh0dHBzOi8vYXBpLmRlZXBzZWVrLmNvbS92MS9jaGF0L2NvbXBsZXRpb25zJyxcblx0XHRcdFx0J1x1MjAyMiBcdTY1MkZcdTYzMDFcdTZBMjFcdTU3OEJcdUZGMUFkZWVwc2Vlay1jaGF0LCBkZWVwc2Vlay1yZWFzb25lcidcblx0XHRcdF0sXG5cdFx0XHR2b2xjYW5vOiBbXG5cdFx0XHRcdCdEZWVwU2VlayAtIFx1NzA2Qlx1NUM3MVx1NUYxNVx1NjRDRScsXG5cdFx0XHRcdCdcdTIwMjIgQVBJIFx1NTczMFx1NTc0MFx1RkYxQWh0dHBzOi8vYXJrLmNuLWJlaWppbmcudm9sY2VzLmNvbS9hcGkvdjMvY2hhdC9jb21wbGV0aW9ucycsXG5cdFx0XHRcdCdcdTIwMjIgXHU2Q0U4XHU2MTBGXHVGRjFBXHU5NzAwXHU4OTgxXHU1NzI4XHU3MDZCXHU1QzcxXHU2NUI5XHU4MjFGXHU4QkJFXHU3RjZFXHU2M0E4XHU3NDA2XHU2QTIxXHU1NzhCXHVGRjBDXHU3MTM2XHU1NDBFXHU2REZCXHU1MkEwXHU2QTIxXHU1NzhCXHU1NDBEXHU3OUYwXHVGRjBDXHU1OTgyXHVGRjFBZXAtMjAyNTAyMjEwODQ0MzMnXG5cdFx0XHRdLFxuXHRcdFx0b2xsYW1hOiBbXG5cdFx0XHRcdCdPbGxhbWFcdUZGMDhcdTY3MkNcdTU3MzBcdUZGMDknLFxuXHRcdFx0XHQnXHUyMDIyIEFQSSBcdTU3MzBcdTU3NDBcdUZGMUFodHRwOi8vbG9jYWxob3N0OjExNDM0L3YxL2NoYXQvY29tcGxldGlvbnMnLFxuXHRcdFx0XHQnXHUyMDIyIFx1NjUyRlx1NjMwMVx1NkEyMVx1NTc4Qlx1RkYxQWxsYW1hMywgcGhpMywgcXdlbjIsIG1pc3RyYWwgXHU3QjQ5XHU2NzJDXHU1NzMwXHU2QTIxXHU1NzhCJyxcblx0XHRcdFx0J1x1MjAyMiBcdTY3MkNcdTU3MzBcdTkwRThcdTdGNzJcdUZGMENcdTY1RTBcdTk3MDAgQVBJIEtleSdcblx0XHRcdF1cblx0XHR9O1xuXG5cdFx0Y29uc3Qgc2hvd1Byb3ZpZGVySW5mbyA9IChwcm92aWRlcjogc3RyaW5nKSA9PiB7XG5cdFx0XHRjb25zdCBwcm92aWRlclNlY3Rpb24gPSBjb250YWluZXJFbC5xdWVyeVNlbGVjdG9yKCcucHJvdmlkZXItc2VjdGlvbicpO1xuXHRcdFx0aWYgKHByb3ZpZGVyU2VjdGlvbikge1xuXHRcdFx0XHRwcm92aWRlclNlY3Rpb24ucmVtb3ZlKCk7XG5cdFx0XHR9XG5cblx0XHRcdGNvbnN0IHNlY3Rpb24gPSBjb250YWluZXJFbC5jcmVhdGVEaXYoeyBjbHM6ICdwcm92aWRlci1zZWN0aW9uJyB9KTtcblx0XHRcdGNvbnN0IHByb3ZpZGVySW5mbyA9IHNlY3Rpb24uY3JlYXRlRGl2KHsgY2xzOiAncHJvdmlkZXItaW5mbycgfSk7XG5cblx0XHRcdGlmIChwcm92aWRlckRlc2NyaXB0aW9uc1twcm92aWRlcl0pIHtcblx0XHRcdFx0cHJvdmlkZXJEZXNjcmlwdGlvbnNbcHJvdmlkZXJdLmZvckVhY2godGV4dCA9PiB7XG5cdFx0XHRcdFx0cHJvdmlkZXJJbmZvLmNyZWF0ZUVsKCdwJywgeyB0ZXh0IH0pO1xuXHRcdFx0XHR9KTtcblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0Ly8gXHU2NjNFXHU3OTNBXHU1RjUzXHU1MjREXHU5MDA5XHU2MkU5XHU3Njg0XHU2M0QwXHU0RjlCXHU1NTQ2XHU0RkUxXHU2MDZGXG5cdFx0c2hvd1Byb3ZpZGVySW5mbyh0aGlzLnBsdWdpbi5zZXR0aW5ncy5wcm92aWRlcik7XG5cblx0XHQvLyBcdTZERkJcdTUyQTBcdTYzRDBcdTRGOUJcdTU1NDZcdTkwMDlcdTYyRTlcdTRFMEJcdTYyQzlcdTY4NDZcblx0XHRuZXcgU2V0dGluZyhjb250YWluZXJFbClcblx0XHRcdC5zZXROYW1lKCdBSSBcdTY3MERcdTUyQTFcdTU1NDYnKVxuXHRcdFx0LnNldERlc2MoJ1x1OTAwOVx1NjJFOVx1ODk4MVx1NEY3Rlx1NzUyOFx1NzY4NCBBSSBcdTY3MERcdTUyQTFcdTU1NDYnKVxuXHRcdFx0LmFkZERyb3Bkb3duKGRyb3Bkb3duID0+IHtcblx0XHRcdFx0T2JqZWN0LmtleXMoUFJPVklERVJfQ09ORklHUykuZm9yRWFjaChwcm92aWRlciA9PiB7XG5cdFx0XHRcdFx0bGV0IGxhYmVsID0gJyc7XG5cdFx0XHRcdFx0c3dpdGNoIChwcm92aWRlcikge1xuXHRcdFx0XHRcdFx0Y2FzZSAnb3BlbmFpJzogbGFiZWwgPSAnT3BlbkFJJzsgYnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlICdnZW1pbmknOiBsYWJlbCA9ICdHZW1pbmknOyBicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgJ2NsYXVkZSc6IGxhYmVsID0gJ0NsYXVkZSc7IGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAnZGVlcHNlZWsnOiBsYWJlbCA9ICdEZWVwU2VlayAtIFx1NkRGMVx1NUVBNlx1NkM0Mlx1N0QyMic7IGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAndm9sY2Fubyc6IGxhYmVsID0gJ0RlZXBTZWVrIC0gXHU3MDZCXHU1QzcxXHU1RjE1XHU2NENFJzsgYnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlICdvbGxhbWEnOiBsYWJlbCA9ICdPbGxhbWFcdUZGMDhcdTY3MkNcdTU3MzBcdUZGMDknOyBicmVhaztcblx0XHRcdFx0XHRcdGRlZmF1bHQ6IGxhYmVsID0gcHJvdmlkZXI7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGRyb3Bkb3duLmFkZE9wdGlvbihwcm92aWRlciwgbGFiZWwpO1xuXHRcdFx0XHR9KTtcblx0XHRcdFx0ZHJvcGRvd24uc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MucHJvdmlkZXIpO1xuXHRcdFx0XHRkcm9wZG93bi5vbkNoYW5nZShhc3luYyAodmFsdWU6IHN0cmluZykgPT4ge1xuXHRcdFx0XHRcdC8vIFx1NEZERFx1NUI1OFx1NUY1M1x1NTI0RFx1NjNEMFx1NEY5Qlx1NTU0Nlx1NzY4NFx1OEJCRVx1N0Y2RVxuXHRcdFx0XHRcdGNvbnN0IGN1cnJlbnRQcm92aWRlciA9IHRoaXMucGx1Z2luLnNldHRpbmdzLnByb3ZpZGVyO1xuXHRcdFx0XHRcdGNvbnN0IGN1cnJlbnRTZXR0aW5ncyA9IHRoaXMucGx1Z2luLnNldHRpbmdzLnByb3ZpZGVyU2V0dGluZ3NbY3VycmVudFByb3ZpZGVyXTtcblxuXHRcdFx0XHRcdC8vIFx1NjZGNFx1NjVCMFx1NjNEMFx1NEY5Qlx1NTU0NlxuXHRcdFx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLnByb3ZpZGVyID0gdmFsdWU7XG5cblx0XHRcdFx0XHQvLyBcdTUyMURcdTU5Q0JcdTUzMTZcdTY1QjBcdTYzRDBcdTRGOUJcdTU1NDZcdTc2ODRcdThCQkVcdTdGNkVcdUZGMDhcdTRFQzVcdTU3MjhcdTk5OTZcdTZCMjFcdThCQkVcdTdGNkVcdTY1RjZcdUZGMDlcblx0XHRcdFx0XHRpZiAoIXRoaXMucGx1Z2luLnNldHRpbmdzLnByb3ZpZGVyU2V0dGluZ3NbdmFsdWVdKSB7XG5cdFx0XHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5wcm92aWRlclNldHRpbmdzW3ZhbHVlXSA9IHtcblx0XHRcdFx0XHRcdFx0YXBpS2V5OiAnJyxcblx0XHRcdFx0XHRcdFx0YXBpVXJsOiBQUk9WSURFUl9DT05GSUdTW3ZhbHVlXS5kZWZhdWx0VXJsLFxuXHRcdFx0XHRcdFx0XHRtb2RlbDogUFJPVklERVJfQ09ORklHU1t2YWx1ZV0uZGVmYXVsdE1vZGVsXG5cdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuXHRcdFx0XHRcdHRoaXMuZGlzcGxheSgpO1xuXHRcdFx0XHR9KTtcblx0XHRcdH0pO1xuXG5cdFx0Ly8gQVBJIFx1NUJDNlx1OTRBNVx1OEJCRVx1N0Y2RSArIFx1NkQ0Qlx1OEJENVx1OEZERVx1OTAxQVx1NjAyN1x1NTZGRVx1NjgwN1x1NjMwOVx1OTRBRVxuXHRcdG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuXHRcdFx0LnNldE5hbWUoJ0FQSSBcdTVCQzZcdTk0QTUnKVxuXHRcdFx0LnNldERlc2MoJ1x1OEY5M1x1NTE2NVx1NEY2MFx1NzY4NCBBUEkgXHU1QkM2XHU5NEE1Jylcblx0XHRcdC5hZGRUZXh0KCh0ZXh0OiBUZXh0Q29tcG9uZW50KSA9PiB7XG5cdFx0XHRcdHRleHQuc2V0UGxhY2Vob2xkZXIoJ1x1OEJGN1x1OEY5M1x1NTE2NSBBUEkgXHU1QkM2XHU5NEE1Jylcblx0XHRcdFx0XHQuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MucHJvdmlkZXJTZXR0aW5nc1t0aGlzLnBsdWdpbi5zZXR0aW5ncy5wcm92aWRlcl0uYXBpS2V5KVxuXHRcdFx0XHRcdC5vbkNoYW5nZShhc3luYyAodmFsdWU6IHN0cmluZykgPT4ge1xuXHRcdFx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MucHJvdmlkZXJTZXR0aW5nc1t0aGlzLnBsdWdpbi5zZXR0aW5ncy5wcm92aWRlcl0uYXBpS2V5ID0gdmFsdWU7XG5cdFx0XHRcdFx0XHRhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdH0pXG5cdFx0XHQuYWRkRXh0cmFCdXR0b24oKGJ0bikgPT4ge1xuXHRcdFx0XHRidG4uc2V0SWNvbignbHVjaWRlLXphcCcpXG5cdFx0XHRcdFx0LnNldFRvb2x0aXAoJ1x1NkQ0Qlx1OEJENVx1OEZERVx1OTAxQVx1NjAyNycpXG5cdFx0XHRcdFx0Lm9uQ2xpY2soYXN5bmMgKCkgPT4ge1xuXHRcdFx0XHRcdFx0YnRuLnNldERpc2FibGVkKHRydWUpO1xuXHRcdFx0XHRcdFx0Y29uc3Qgb3JpZ2luYWxJY29uID0gYnRuLmV4dHJhU2V0dGluZ3NFbC5xdWVyeVNlbGVjdG9yKCdzdmcnKT8ub3V0ZXJIVE1MO1xuXHRcdFx0XHRcdFx0YnRuLnNldEljb24oJ2x1Y2lkZS1sb2FkZXInKTtcblx0XHRcdFx0XHRcdGJ0bi5leHRyYVNldHRpbmdzRWwuY2xhc3NMaXN0LmFkZCgnYWktdGFncy1zcGluJyk7XG5cdFx0XHRcdFx0XHRjb25zdCBwcm92aWRlciA9IHRoaXMucGx1Z2luLnNldHRpbmdzLnByb3ZpZGVyO1xuXHRcdFx0XHRcdFx0Y29uc3QgY29uZmlnID0gdGhpcy5wbHVnaW4uc2V0dGluZ3MucHJvdmlkZXJTZXR0aW5nc1twcm92aWRlcl07XG5cdFx0XHRcdFx0XHRjb25zdCBhaVNlcnZpY2UgPSBuZXcgQUlTZXJ2aWNlKHtcblx0XHRcdFx0XHRcdFx0YXBpS2V5OiBjb25maWcuYXBpS2V5LFxuXHRcdFx0XHRcdFx0XHRhcGlVcmw6IGNvbmZpZy5hcGlVcmwsXG5cdFx0XHRcdFx0XHRcdG1vZGVsOiBjb25maWcubW9kZWxcblx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdFx0YXdhaXQgYWlTZXJ2aWNlLnRlc3RDb25uZWN0aW9uKCk7XG5cdFx0XHRcdFx0XHRcdG5ldyBOb3RpY2UoJ0FQSSBcdThGREVcdTYzQTVcdTZENEJcdThCRDVcdTYyMTBcdTUyOUYnKTtcblx0XHRcdFx0XHRcdH0gY2F0Y2ggKGU6IGFueSkge1xuXHRcdFx0XHRcdFx0XHRuZXcgTm90aWNlKCdBUEkgXHU4RkRFXHU2M0E1XHU2RDRCXHU4QkQ1XHU1OTMxXHU4RDI1OiAnICsgKGU/Lm1lc3NhZ2UgfHwgZSkpO1xuXHRcdFx0XHRcdFx0fSBmaW5hbGx5IHtcblx0XHRcdFx0XHRcdFx0YnRuLnNldERpc2FibGVkKGZhbHNlKTtcblx0XHRcdFx0XHRcdFx0YnRuLnNldEljb24oJ2x1Y2lkZS16YXAnKTtcblx0XHRcdFx0XHRcdFx0YnRuLmV4dHJhU2V0dGluZ3NFbC5jbGFzc0xpc3QucmVtb3ZlKCdhaS10YWdzLXNwaW4nKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9KTtcblx0XHRcdH0pO1xuXG5cdFx0Ly8gQVBJIFx1NTczMFx1NTc0MFx1OEJCRVx1N0Y2RSArIFx1NjA2Mlx1NTkwRFx1OUVEOFx1OEJBNFx1NTZGRVx1NjgwN1x1NjMwOVx1OTRBRVxuXHRcdG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuXHRcdFx0LnNldE5hbWUoJ0FQSSBcdTU3MzBcdTU3NDAnKVxuXHRcdFx0LnNldERlc2MoJ1x1OEY5M1x1NTE2NSBBUEkgXHU1NzMwXHU1NzQwJylcblx0XHRcdC5hZGRUZXh0KCh0ZXh0OiBUZXh0Q29tcG9uZW50KSA9PiB7XG5cdFx0XHRcdHRleHQuc2V0UGxhY2Vob2xkZXIoUFJPVklERVJfQ09ORklHU1t0aGlzLnBsdWdpbi5zZXR0aW5ncy5wcm92aWRlcl0uZGVmYXVsdFVybClcblx0XHRcdFx0XHQuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MucHJvdmlkZXJTZXR0aW5nc1t0aGlzLnBsdWdpbi5zZXR0aW5ncy5wcm92aWRlcl0uYXBpVXJsKVxuXHRcdFx0XHRcdC5vbkNoYW5nZShhc3luYyAodmFsdWU6IHN0cmluZykgPT4ge1xuXHRcdFx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MucHJvdmlkZXJTZXR0aW5nc1t0aGlzLnBsdWdpbi5zZXR0aW5ncy5wcm92aWRlcl0uYXBpVXJsID0gdmFsdWU7XG5cdFx0XHRcdFx0XHRhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdH0pXG5cdFx0XHQuYWRkRXh0cmFCdXR0b24oKGJ0bikgPT4ge1xuXHRcdFx0XHRidG4uc2V0SWNvbignbHVjaWRlLXJvdGF0ZS1jY3cnKVxuXHRcdFx0XHRcdC5zZXRUb29sdGlwKCdcdTYwNjJcdTU5MERcdTlFRDhcdThCQTQnKVxuXHRcdFx0XHRcdC5vbkNsaWNrKGFzeW5jICgpID0+IHtcblx0XHRcdFx0XHRcdGNvbnN0IHByb3ZpZGVyID0gdGhpcy5wbHVnaW4uc2V0dGluZ3MucHJvdmlkZXI7XG5cdFx0XHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5wcm92aWRlclNldHRpbmdzW3Byb3ZpZGVyXS5hcGlVcmwgPSBQUk9WSURFUl9DT05GSUdTW3Byb3ZpZGVyXS5kZWZhdWx0VXJsO1xuXHRcdFx0XHRcdFx0YXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG5cdFx0XHRcdFx0XHR0aGlzLmRpc3BsYXkoKTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdH0pO1xuXG5cdFx0Ly8gXHU2REZCXHU1MkEwXHU5ODg0XHU4QkJFXHU2QTIxXHU1NzhCXHU0RTBCXHU2MkM5XHU2ODQ2XG5cdFx0bmV3IFNldHRpbmcoY29udGFpbmVyRWwpXG5cdFx0XHQuc2V0TmFtZSgnXHU5ODg0XHU4QkJFXHU2QTIxXHU1NzhCJylcblx0XHRcdC5zZXREZXNjKCdcdTkwMDlcdTYyRTlcdTk4ODRcdThCQkVcdTc2ODQgQUkgXHU2QTIxXHU1NzhCJylcblx0XHRcdC5hZGREcm9wZG93bihkcm9wZG93biA9PiB7XG5cdFx0XHRcdGNvbnN0IG1vZGVscyA9IFBST1ZJREVSX0NPTkZJR1NbdGhpcy5wbHVnaW4uc2V0dGluZ3MucHJvdmlkZXJdPy5tb2RlbHMgPz8gW107XG5cdFx0XHRcdG1vZGVscy5mb3JFYWNoKG1vZGVsID0+IHtcblx0XHRcdFx0XHRkcm9wZG93bi5hZGRPcHRpb24obW9kZWwsIG1vZGVsKTtcblx0XHRcdFx0fSk7XG5cdFx0XHRcdC8vIFx1ODNCN1x1NTNENlx1NUY1M1x1NTI0RFx1NjNEMFx1NEY5Qlx1NTU0Nlx1NzY4NFx1NkEyMVx1NTc4Qlx1OEJCRVx1N0Y2RVxuXHRcdFx0XHRjb25zdCBjdXJyZW50TW9kZWwgPSB0aGlzLnBsdWdpbi5zZXR0aW5ncy5wcm92aWRlclNldHRpbmdzW3RoaXMucGx1Z2luLnNldHRpbmdzLnByb3ZpZGVyXS5tb2RlbDtcblx0XHRcdFx0Ly8gXHU4QkJFXHU3RjZFXHU1RjUzXHU1MjREXHU1MDNDXHU0RTNBXHU5ODg0XHU4QkJFXHU2QTIxXHU1NzhCXHU0RTJEXHU3Njg0XHU0RTAwXHU0RTJBXHVGRjBDXHU1OTgyXHU2NzlDXHU0RTBEXHU1NzI4XHU5ODg0XHU4QkJFXHU0RTJEXHU1MjE5XHU5MDA5XHU2MkU5XHU3QjJDXHU0RTAwXHU0RTJBXG5cdFx0XHRcdGNvbnN0IGRlZmF1bHRNb2RlbCA9IG1vZGVscy5pbmNsdWRlcyhjdXJyZW50TW9kZWwpID8gY3VycmVudE1vZGVsIDogKG1vZGVsc1swXSA/PyAnJyk7XG5cdFx0XHRcdGRyb3Bkb3duLnNldFZhbHVlKGRlZmF1bHRNb2RlbCk7XG5cdFx0XHRcdGRyb3Bkb3duLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZTogc3RyaW5nKSA9PiB7XG5cdFx0XHRcdFx0Ly8gXHU1M0VBXHU2NzA5XHU1RjUzXHU3NTI4XHU2MjM3XHU2Q0ExXHU2NzA5XHU4RjkzXHU1MTY1XHU4MUVBXHU1QjlBXHU0RTQ5XHU2QTIxXHU1NzhCXHU2NUY2XHVGRjBDXHU2MjREXHU0RjdGXHU3NTI4XHU5ODg0XHU4QkJFXHU2QTIxXHU1NzhCXG5cdFx0XHRcdFx0Y29uc3QgY3VzdG9tTW9kZWxJbnB1dCA9IHRoaXMucGx1Z2luLnNldHRpbmdzLnByb3ZpZGVyU2V0dGluZ3NbdGhpcy5wbHVnaW4uc2V0dGluZ3MucHJvdmlkZXJdLmN1c3RvbU1vZGVsIHx8ICcnO1xuXHRcdFx0XHRcdGlmICghY3VzdG9tTW9kZWxJbnB1dC50cmltKCkpIHtcblx0XHRcdFx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLnByb3ZpZGVyU2V0dGluZ3NbdGhpcy5wbHVnaW4uc2V0dGluZ3MucHJvdmlkZXJdLm1vZGVsID0gdmFsdWU7XG5cdFx0XHRcdFx0XHRhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pO1xuXHRcdFx0fSlcblx0XHRcdC5zZXR0aW5nRWwuc3R5bGUuZGlzcGxheSA9ICdub25lJztcblxuXHRcdC8vIFx1NEUzQVx1NkJDRlx1NEUyQVx1NjNEMFx1NEY5Qlx1NTU0Nlx1NkRGQlx1NTJBMFx1ODFFQVx1NUI5QVx1NEU0OVx1NkEyMVx1NTc4Qlx1OEY5M1x1NTE2NVxuXHRcdG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuXHRcdFx0LnNldE5hbWUodGhpcy5wbHVnaW4uc2V0dGluZ3MucHJvdmlkZXIgPT09ICd2b2xjYW5vJyA/ICdcdTZBMjFcdTU3OEInIDogJ1x1ODFFQVx1NUI5QVx1NEU0OVx1NkEyMVx1NTc4QicpXG5cdFx0XHQuc2V0RGVzYyh0aGlzLnBsdWdpbi5zZXR0aW5ncy5wcm92aWRlciA9PT0gJ3ZvbGNhbm8nID8gJ1x1OEY5M1x1NTE2NVx1NkEyMVx1NTc4Qlx1NTQwRFx1NzlGMCcgOiAnXHU4RjkzXHU1MTY1XHU4MUVBXHU1QjlBXHU0RTQ5XHU2QTIxXHU1NzhCXHU1NDBEXHU3OUYwIChcdTRGMThcdTUxNDhcdTRGN0ZcdTc1MjgpJylcblx0XHRcdC5hZGRUZXh0KCh0ZXh0OiBUZXh0Q29tcG9uZW50KSA9PiB7XG5cdFx0XHRcdHRleHQuc2V0UGxhY2Vob2xkZXIoJ1x1ODFFQVx1NUI5QVx1NEU0OVx1NkEyMVx1NTc4Qlx1NTQwRFx1NzlGMCcpXG5cdFx0XHRcdFx0LnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLnByb3ZpZGVyU2V0dGluZ3NbdGhpcy5wbHVnaW4uc2V0dGluZ3MucHJvdmlkZXJdLm1vZGVsKVxuXHRcdFx0XHRcdC5vbkNoYW5nZShhc3luYyAodmFsdWU6IHN0cmluZykgPT4ge1xuXHRcdFx0XHRcdFx0Ly8gXHU2NkY0XHU2NUIwXHU2QTIxXHU1NzhCXHU4QkJFXHU3RjZFXHU0RTNBXHU4MUVBXHU1QjlBXHU0RTQ5XHU4RjkzXHU1MTY1XHU3Njg0XHU1MDNDXG5cdFx0XHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5wcm92aWRlclNldHRpbmdzW3RoaXMucGx1Z2luLnNldHRpbmdzLnByb3ZpZGVyXS5tb2RlbCA9IHZhbHVlLnRyaW0oKTtcblx0XHRcdFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0fSk7XG5cblx0XHQvLyBcdTZERkJcdTUyQTBcdTgxRUFcdTVCOUFcdTRFNDlcdTYzRDBcdTc5M0FcdThCQ0RcdThCQkVcdTdGNkVcblx0XHRjb25zdCBkZWZhdWx0UHJvbXB0ID0gJ1x1NEY2MFx1NjYyRlx1NEUwMFx1NEUyQVx1NjU4N1x1Njg2M1x1NjgwN1x1N0I3RVx1NzUxRlx1NjIxMFx1NTY2OFx1RkYwQ1x1OEJGN1x1NjgzOVx1NjM2RVx1NjU4N1x1Njg2M1x1NTE4NVx1NUJCOVx1NzUxRlx1NjIxMFx1NjcwMFx1NTkxQSAzIFx1NEUyQVx1NzZGOFx1NTE3M1x1NzY4NFx1NjgwN1x1N0I3RVx1MzAwMlx1NTNFQVx1OTcwMFx1OEZENFx1NTZERVx1NjgwN1x1N0I3RVx1RkYwQ1x1NzUyOFx1OTAxN1x1NTNGN1x1NTIwNlx1OTY5NFx1RkYwQ1x1NEUwRFx1ODk4MVx1NTMwNVx1NTQyQlx1NTE3Nlx1NEVENlx1ODlFM1x1OTFDQVx1NjIxNlx1OEJGNFx1NjYwRVx1MzAwMic7XG5cdFx0Y29uc3QgY3VzdG9tUHJvbXB0U2V0dGluZyA9IG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuXHRcdFx0LnNldENsYXNzKCdjdXN0b20tcHJvbXB0LXNldHRpbmcnKVxuXHRcdFx0LnNldE5hbWUoJ1x1ODFFQVx1NUI5QVx1NEU0OVx1NjNEMFx1NzkzQVx1OEJDRCcpXG5cdFx0XHQuc2V0RGVzYygnXHU4MUVBXHU1QjlBXHU0RTQ5IEFJIFx1NzUxRlx1NjIxMFx1NjgwN1x1N0I3RVx1NzY4NFx1NjNEMFx1NzkzQVx1OEJDRFx1RkYwQ1x1NzU1OVx1N0E3QVx1NTIxOVx1NEY3Rlx1NzUyOFx1OUVEOFx1OEJBNFx1NjNEMFx1NzkzQVx1OEJDRCcpXG5cdFx0XHQuYWRkVGV4dEFyZWEodGV4dCA9PiB7XG5cdFx0XHRcdHRleHQuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuY3VzdG9tUHJvbXB0IHx8IGRlZmF1bHRQcm9tcHQpXG5cdFx0XHRcdFx0Lm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xuXHRcdFx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MuY3VzdG9tUHJvbXB0ID0gdmFsdWU7XG5cdFx0XHRcdFx0XHRhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0dGV4dC5pbnB1dEVsLnJvd3MgPSA2O1xuXHRcdFx0XHR0ZXh0LmlucHV0RWwuY29scyA9IDUwO1xuXHRcdFx0XHR0ZXh0LmlucHV0RWwuc3R5bGUubWluSGVpZ2h0ID0gJzE1MHB4Jztcblx0XHRcdFx0dGV4dC5pbnB1dEVsLnN0eWxlLnJlc2l6ZSA9ICd2ZXJ0aWNhbCc7XG5cdFx0XHR9KVxuXHRcdFx0LmFkZEJ1dHRvbihidXR0b24gPT4ge1xuXHRcdFx0XHRidXR0b25cblx0XHRcdFx0XHQuc2V0SWNvbigncmVzZXQnKVxuXHRcdFx0XHRcdC5zZXRUb29sdGlwKCdcdTkxQ0RcdTdGNkVcdTRFM0FcdTlFRDhcdThCQTRcdTYzRDBcdTc5M0FcdThCQ0QnKVxuXHRcdFx0XHRcdC5vbkNsaWNrKGFzeW5jICgpID0+IHtcblx0XHRcdFx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLmN1c3RvbVByb21wdCA9IGRlZmF1bHRQcm9tcHQ7XG5cdFx0XHRcdFx0XHRhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcblx0XHRcdFx0XHRcdHRoaXMuZGlzcGxheSgpO1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0fSk7XG5cdH1cbn1cbiIsICJleHBvcnQgY2xhc3MgUmVxdWVzdEVycm9yIGV4dGVuZHMgRXJyb3Ige1xyXG4gICAgY29uc3RydWN0b3IobWVzc2FnZTogc3RyaW5nLCBwdWJsaWMgc3RhdHVzOiBudW1iZXIpIHtcclxuICAgICAgICBzdXBlcihtZXNzYWdlKTtcclxuICAgICAgICB0aGlzLm5hbWUgPSAnUmVxdWVzdEVycm9yJztcclxuICAgIH1cclxufSIsICJpbXBvcnQgeyBSZXF1ZXN0RXJyb3IgfSBmcm9tICcuLi9lcnJvcnMvUmVxdWVzdEVycm9yJztcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQUlTZXJ2aWNlQ29uZmlnIHtcclxuICAgIGFwaUtleTogc3RyaW5nO1xyXG4gICAgYXBpVXJsOiBzdHJpbmc7XHJcbiAgICBtb2RlbDogc3RyaW5nO1xyXG4gICAgZXhpc3RpbmdUYWdzPzogc3RyaW5nW107XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQUlSZXNwb25zZSB7XHJcbiAgICBjb250ZW50OiBzdHJpbmc7XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBBSVNlcnZpY2Uge1xyXG4gICAgcHJpdmF0ZSBjb25maWc6IEFJU2VydmljZUNvbmZpZztcclxuICAgIHByaXZhdGUgc3RhdGljIERFRkFVTFRfU1lTVEVNX1BST01QVCA9ICdcdTRGNjBcdTY2MkZcdTRFMDBcdTRFMkFcdTY1ODdcdTY4NjNcdTY4MDdcdTdCN0VcdTc1MUZcdTYyMTBcdTU2NjhcdUZGMENcdThCRjdcdTY4MzlcdTYzNkVcdTY1ODdcdTY4NjNcdTUxODVcdTVCQjlcdTc1MUZcdTYyMTBcdTY3MDBcdTU5MUEgMyBcdTRFMkFcdTc2RjhcdTUxNzNcdTc2ODRcdTY4MDdcdTdCN0VcdTMwMDJcdTUzRUFcdTk3MDBcdThGRDRcdTU2REVcdTY4MDdcdTdCN0VcdUZGMENcdTc1MjhcdTkwMTdcdTUzRjdcdTUyMDZcdTk2OTRcdUZGMENcdTRFMERcdTg5ODFcdTUzMDVcdTU0MkJcdTUxNzZcdTRFRDZcdTg5RTNcdTkxQ0FcdTYyMTZcdThCRjRcdTY2MEVcdUZGMENcdTc5ODFcdTZCNjJcdTY1ODdcdTY3MkNcdTRFMkRcdTUzMDVcdTU0MkJcdTdBN0FcdTY4M0NcdTMwMDInO1xyXG5cclxuICAgIHByaXZhdGUgZ2V0U3lzdGVtUHJvbXB0KCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY29uZmlnLmN1c3RvbVByb21wdD8udHJpbSgpIHx8IEFJU2VydmljZS5ERUZBVUxUX1NZU1RFTV9QUk9NUFQ7XHJcbiAgICB9XHJcbiAgICBwcml2YXRlIHN0YXRpYyBUSU1FT1VUID0gMzAwMDA7IC8vIDMwIFx1NzlEMlx1OEQ4NVx1NjVGNlxyXG4gICAgcHJpdmF0ZSBzdGF0aWMgTUFYX1JFVFJJRVMgPSAyO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKGNvbmZpZzogQUlTZXJ2aWNlQ29uZmlnKSB7XHJcbiAgICAgICAgdGhpcy5jb25maWcgPSBjb25maWc7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBhc3luYyBtYWtlUmVxdWVzdCh1cmw6IHN0cmluZywgb3B0aW9uczogUmVxdWVzdEluaXQpOiBQcm9taXNlPFJlc3BvbnNlPiB7XHJcbiAgICAgICAgY29uc3QgY29udHJvbGxlciA9IG5ldyBBYm9ydENvbnRyb2xsZXIoKTtcclxuICAgICAgICBjb25zdCB0aW1lb3V0SWQgPSBzZXRUaW1lb3V0KCgpID0+IGNvbnRyb2xsZXIuYWJvcnQoKSwgQUlTZXJ2aWNlLlRJTUVPVVQpO1xyXG5cclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKHVybCwge1xyXG4gICAgICAgICAgICAgICAgLi4ub3B0aW9ucyxcclxuICAgICAgICAgICAgICAgIHNpZ25hbDogY29udHJvbGxlci5zaWduYWxcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlcnJvciA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBSZXF1ZXN0RXJyb3IoZXJyb3IuZXJyb3I/Lm1lc3NhZ2UgfHwgJ1x1OEJGN1x1NkM0Mlx1NTkzMVx1OEQyNScsIHJlc3BvbnNlLnN0YXR1cyk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZTtcclxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICBpZiAoZXJyb3IubmFtZSA9PT0gJ0Fib3J0RXJyb3InKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUmVxdWVzdEVycm9yKCdcdThCRjdcdTZDNDJcdThEODVcdTY1RjYnLCA0MDgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRocm93IGVycm9yO1xyXG4gICAgICAgIH0gZmluYWxseSB7XHJcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0SWQpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGFzeW5jIHJldHJ5UmVxdWVzdChmbjogKCkgPT4gUHJvbWlzZTxSZXNwb25zZT4pOiBQcm9taXNlPFJlc3BvbnNlPiB7XHJcbiAgICAgICAgbGV0IGxhc3RFcnJvcjogRXJyb3I7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPD0gQUlTZXJ2aWNlLk1BWF9SRVRSSUVTOyBpKyspIHtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBhd2FpdCBmbigpO1xyXG4gICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICAgICAgbGFzdEVycm9yID0gZXJyb3I7XHJcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBSZXF1ZXN0RXJyb3IgJiYgZXJyb3Iuc3RhdHVzID49IDUwMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCBNYXRoLnBvdygyLCBpKSAqIDEwMDApKTtcclxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRocm93IGxhc3RFcnJvcjtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGNhbGN1bGF0ZVNpbWlsYXJpdHkoc3RyMTogc3RyaW5nLCBzdHIyOiBzdHJpbmcpOiBudW1iZXIge1xyXG4gICAgICAgIHN0cjEgPSBzdHIxLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgc3RyMiA9IHN0cjIudG9Mb3dlckNhc2UoKTtcclxuICAgICAgICBpZiAoc3RyMSA9PT0gc3RyMikgcmV0dXJuIDEuMDtcclxuICAgICAgICBcclxuICAgICAgICBjb25zdCBzZXQxID0gbmV3IFNldChzdHIxLnNwbGl0KCcnKSk7XHJcbiAgICAgICAgY29uc3Qgc2V0MiA9IG5ldyBTZXQoc3RyMi5zcGxpdCgnJykpO1xyXG4gICAgICAgIGNvbnN0IGludGVyc2VjdGlvbiA9IG5ldyBTZXQoWy4uLnNldDFdLmZpbHRlcih4ID0+IHNldDIuaGFzKHgpKSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgcmV0dXJuIGludGVyc2VjdGlvbi5zaXplIC8gTWF0aC5tYXgoc2V0MS5zaXplLCBzZXQyLnNpemUpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgZmluZFNpbWlsYXJFeGlzdGluZ1RhZyhuZXdUYWc6IHN0cmluZyk6IHN0cmluZyB8IG51bGwge1xyXG4gICAgICAgIGlmICghdGhpcy5jb25maWcuZXhpc3RpbmdUYWdzPy5sZW5ndGgpIHJldHVybiBudWxsO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGNvbnN0IHNpbWlsYXJpdHlUaHJlc2hvbGQgPSAwLjc7XHJcbiAgICAgICAgbGV0IG1vc3RTaW1pbGFyVGFnID0gbnVsbDtcclxuICAgICAgICBsZXQgaGlnaGVzdFNpbWlsYXJpdHkgPSAwO1xyXG5cclxuICAgICAgICBmb3IgKGNvbnN0IGV4aXN0aW5nVGFnIG9mIHRoaXMuY29uZmlnLmV4aXN0aW5nVGFncykge1xyXG4gICAgICAgICAgICBjb25zdCBzaW1pbGFyaXR5ID0gdGhpcy5jYWxjdWxhdGVTaW1pbGFyaXR5KG5ld1RhZywgZXhpc3RpbmdUYWcpO1xyXG4gICAgICAgICAgICBpZiAoc2ltaWxhcml0eSA+IHNpbWlsYXJpdHlUaHJlc2hvbGQgJiYgc2ltaWxhcml0eSA+IGhpZ2hlc3RTaW1pbGFyaXR5KSB7XHJcbiAgICAgICAgICAgICAgICBoaWdoZXN0U2ltaWxhcml0eSA9IHNpbWlsYXJpdHk7XHJcbiAgICAgICAgICAgICAgICBtb3N0U2ltaWxhclRhZyA9IGV4aXN0aW5nVGFnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gbW9zdFNpbWlsYXJUYWc7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgZ2VuZXJhdGVUYWdzKGNvbnRlbnQ6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nW10+IHtcclxuICAgICAgICBjb25zdCBwcm92aWRlciA9IHRoaXMuZ2V0UHJvdmlkZXJGcm9tVXJsKCk7XHJcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLm1ha2VSZXF1ZXN0KFxyXG4gICAgICAgICAgICB0aGlzLmdldEZ1bGxBcGlVcmwocHJvdmlkZXIpLFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcclxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IHRoaXMuZ2V0SGVhZGVycyhwcm92aWRlciksXHJcbiAgICAgICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh0aGlzLmdldFJlcXVlc3RCb2R5KGNvbnRlbnQsIHByb3ZpZGVyKSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XHJcbiAgICAgICAgY29uc3QgZ2VuZXJhdGVkVGFncyA9IHRoaXMucGFyc2VSZXNwb25zZShkYXRhLCBwcm92aWRlcik7XHJcbiAgICAgICAgXHJcbiAgICAgICAgcmV0dXJuIGdlbmVyYXRlZFRhZ3MubWFwKHRhZyA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHNpbWlsYXJUYWcgPSB0aGlzLmZpbmRTaW1pbGFyRXhpc3RpbmdUYWcodGFnKTtcclxuICAgICAgICAgICAgcmV0dXJuIHNpbWlsYXJUYWcgfHwgdGFnO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgZ2V0UHJvdmlkZXJGcm9tVXJsKCk6IHN0cmluZyB7XHJcbiAgICAgICAgaWYgKHRoaXMuY29uZmlnLmFwaVVybC5pbmNsdWRlcygnZ2VuZXJhdGl2ZWxhbmd1YWdlLmdvb2dsZWFwaXMuY29tJykpIHtcclxuICAgICAgICAgICAgcmV0dXJuICdnZW1pbmknO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5jb25maWcuYXBpVXJsLmluY2x1ZGVzKCdhbnRocm9waWMuY29tJykpIHtcclxuICAgICAgICAgICAgcmV0dXJuICdjbGF1ZGUnO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5jb25maWcuYXBpVXJsLmluY2x1ZGVzKCdsb2NhbGhvc3Q6MTE0MzQnKSB8fCB0aGlzLmNvbmZpZy5hcGlVcmwuaW5jbHVkZXMoJ29sbGFtYScpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAnb2xsYW1hJztcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuICdvcGVuYWknO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgZ2V0Q3VzdG9tUHJvbXB0KCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucGx1Z2luLnNldHRpbmdzLmN1c3RvbVByb21wdDtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGdldEZ1bGxBcGlVcmwocHJvdmlkZXI6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICAgICAgaWYgKHByb3ZpZGVyID09PSBcImdlbWluaVwiKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGJhc2VVcmwgPSB0aGlzLmNvbmZpZy5hcGlVcmw7XHJcbiAgICAgICAgICAgIGNvbnN0IG1vZGVsUGF0aCA9IGAvdjFiZXRhL21vZGVscy8ke3RoaXMuY29uZmlnLm1vZGVsfTpnZW5lcmF0ZUNvbnRlbnRgO1xyXG4gICAgICAgICAgICAvLyBcdTU5ODJcdTY3OUNcdTY2MkZcdTRFRTNcdTc0MDZcdTU3MzBcdTU3NDBcdUZGMENcdTc2RjRcdTYzQTVcdThGRDRcdTU2REVcdTVCOENcdTY1NzRVUkxcclxuICAgICAgICAgICAgaWYgKGJhc2VVcmwuaW5jbHVkZXMoJ2dlbWluaS1wcm94eScpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYmFzZVVybDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gYCR7YmFzZVVybH0ke21vZGVsUGF0aH1gO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5jb25maWcuYXBpVXJsO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgZ2V0SGVhZGVycyhwcm92aWRlcjogc3RyaW5nKTogUmVjb3JkPHN0cmluZywgc3RyaW5nPiB7XHJcbiAgICAgICAgY29uc3QgaGVhZGVyczogUmVjb3JkPHN0cmluZywgc3RyaW5nPiA9IHtcclxuICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgaWYgKHRoaXMuY29uZmlnLmFwaUtleSkge1xyXG4gICAgICAgICAgICBpZiAocHJvdmlkZXIgPT09ICdnZW1pbmknKSB7XHJcbiAgICAgICAgICAgICAgICBoZWFkZXJzWyd4LWdvb2ctYXBpLWtleSddID0gdGhpcy5jb25maWcuYXBpS2V5O1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHByb3ZpZGVyID09PSAnY2xhdWRlJykge1xyXG4gICAgICAgICAgICAgICAgaGVhZGVyc1sneC1hcGkta2V5J10gPSB0aGlzLmNvbmZpZy5hcGlLZXk7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocHJvdmlkZXIgPT09ICdvcGVuYWknKSB7XHJcbiAgICAgICAgICAgICAgICBoZWFkZXJzWydBdXRob3JpemF0aW9uJ10gPSBgQmVhcmVyICR7dGhpcy5jb25maWcuYXBpS2V5fWA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gb2xsYW1hIFx1NEUwRFx1OTcwMFx1ODk4MSBrZXlcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGhlYWRlcnM7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBnZXRSZXF1ZXN0Qm9keShjb250ZW50OiBzdHJpbmcsIHByb3ZpZGVyOiBzdHJpbmcpOiBhbnkge1xyXG4gICAgICAgIGlmIChwcm92aWRlciA9PT0gJ2dlbWluaScpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIGNvbnRlbnRzOiBbXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJ0czogW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyB0ZXh0OiB0aGlzLmdldFN5c3RlbVByb21wdCgpIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IHRleHQ6IGNvbnRlbnQgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBdXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgXVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAocHJvdmlkZXIgPT09ICdjbGF1ZGUnKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBtb2RlbDogdGhpcy5jb25maWcubW9kZWwsXHJcbiAgICAgICAgICAgICAgICBtYXhfdG9rZW5zOiAyNTYsXHJcbiAgICAgICAgICAgICAgICBtZXNzYWdlczogW1xyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcm9sZTogJ3VzZXInLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OiBjb250ZW50XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgXVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBvcGVuYWlcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBtb2RlbDogdGhpcy5jb25maWcubW9kZWwsXHJcbiAgICAgICAgICAgIG1lc3NhZ2VzOiBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgcm9sZTogJ3N5c3RlbScsXHJcbiAgICAgICAgICAgICAgICAgICAgY29udGVudDogdGhpcy5nZXRTeXN0ZW1Qcm9tcHQoKVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICByb2xlOiAndXNlcicsXHJcbiAgICAgICAgICAgICAgICAgICAgY29udGVudDogY29udGVudFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHBhcnNlUmVzcG9uc2UoZGF0YTogYW55LCBwcm92aWRlcjogc3RyaW5nKTogc3RyaW5nW10ge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGxldCB0YWdzVGV4dCA9ICcnO1xyXG4gICAgICAgICAgICBpZiAocHJvdmlkZXIgPT09ICdnZW1pbmknKSB7XHJcbiAgICAgICAgICAgICAgICB0YWdzVGV4dCA9IGRhdGEuY2FuZGlkYXRlcz8uWzBdPy5jb250ZW50Py5wYXJ0cz8uWzBdPy50ZXh0Py50cmltKCkgfHwgJyc7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocHJvdmlkZXIgPT09ICdjbGF1ZGUnKSB7XHJcbiAgICAgICAgICAgICAgICB0YWdzVGV4dCA9IGRhdGE/LmNvbnRlbnQ/LlswXT8udGV4dD8udHJpbSgpIHx8IGRhdGE/LmNvbXBsZXRpb24/LnRyaW0oKSB8fCAnJztcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRhZ3NUZXh0ID0gZGF0YS5jaG9pY2VzPy5bMF0/Lm1lc3NhZ2U/LmNvbnRlbnQ/LnRyaW0oKSB8fCAnJztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRhZ3NUZXh0XHJcbiAgICAgICAgICAgICAgICAuc3BsaXQoJywnKVxyXG4gICAgICAgICAgICAgICAgLm1hcCgodGFnOiBzdHJpbmcpID0+IHRhZy50cmltKCkpXHJcbiAgICAgICAgICAgICAgICAuZmlsdGVyKCh0YWc6IHN0cmluZykgPT4gdGFnKVxyXG4gICAgICAgICAgICAgICAgLm1hcCgodGFnOiBzdHJpbmcpID0+IHRhZy5yZXBsYWNlKC9cXHMrL2csICcnKSk7XHJcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdcdTg5RTNcdTY3OTAgQUkgXHU1NENEXHU1RTk0XHU1OTMxXHU4RDI1Jyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIHRlc3RDb25uZWN0aW9uKCk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgICAgIGNvbnN0IHByb3ZpZGVyID0gdGhpcy5nZXRQcm92aWRlckZyb21VcmwoKTtcclxuICAgICAgICBjb25zdCB0ZXN0TWVzc2FnZSA9ICdcdTRGNjBcdTU5N0QnO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGF3YWl0IHRoaXMubWFrZVJlcXVlc3QoXHJcbiAgICAgICAgICAgICAgICB0aGlzLmdldEZ1bGxBcGlVcmwocHJvdmlkZXIpLFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxyXG4gICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IHRoaXMuZ2V0SGVhZGVycyhwcm92aWRlciksXHJcbiAgICAgICAgICAgICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkodGhpcy5nZXRSZXF1ZXN0Qm9keSh0ZXN0TWVzc2FnZSwgcHJvdmlkZXIpKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQVBJXHU4RkRFXHU2M0E1XHU2RDRCXHU4QkQ1XHU1OTMxXHU4RDI1OiAke2Vycm9yLm1lc3NhZ2V9YCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59Il0sCiAgIm1hcHBpbmdzIjogIjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQUE7QUFBQTtBQUFBLHNCQUE2SDs7O0FDQXRILGlDQUEy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
