/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// main.ts
__export(exports, {
  default: () => AutoTaggerPlugin
});
var import_obsidian = __toModule(require("obsidian"));

// src/errors/RequestError.ts
var RequestError = class extends Error {
  constructor(message, status) {
    super(message);
    this.status = status;
    this.name = "RequestError";
  }
};

// src/services/AIService.ts
var _AIService = class {
  constructor(config) {
    this.config = config;
  }
  makeRequest(url, options) {
    return __async(this, null, function* () {
      var _a;
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), _AIService.TIMEOUT);
      try {
        const response = yield fetch(url, __spreadProps(__spreadValues({}, options), {
          signal: controller.signal
        }));
        if (!response.ok) {
          const error = yield response.json();
          throw new RequestError(((_a = error.error) == null ? void 0 : _a.message) || "\u8BF7\u6C42\u5931\u8D25", response.status);
        }
        return response;
      } catch (error) {
        if (error.name === "AbortError") {
          throw new RequestError("\u8BF7\u6C42\u8D85\u65F6", 408);
        }
        throw error;
      } finally {
        clearTimeout(timeoutId);
      }
    });
  }
  retryRequest(fn) {
    return __async(this, null, function* () {
      let lastError;
      for (let i = 0; i <= _AIService.MAX_RETRIES; i++) {
        try {
          return yield fn();
        } catch (error) {
          lastError = error;
          if (error instanceof RequestError && error.status >= 500) {
            yield new Promise((resolve) => setTimeout(resolve, Math.pow(2, i) * 1e3));
            continue;
          }
          throw error;
        }
      }
      throw lastError;
    });
  }
  generateTags(content) {
    return __async(this, null, function* () {
      const provider = this.getProviderFromUrl();
      const response = yield this.makeRequest(this.getFullApiUrl(provider), {
        method: "POST",
        headers: this.getHeaders(provider),
        body: JSON.stringify(this.getRequestBody(content, provider))
      });
      const data = yield response.json();
      return this.parseResponse(data, provider);
    });
  }
  getProviderFromUrl() {
    if (this.config.apiUrl.includes("generativelanguage.googleapis.com")) {
      return "gemini";
    }
    return "openai";
  }
  getFullApiUrl(provider) {
    if (provider === "gemini") {
      return `${this.config.apiUrl}${this.config.model}:generateContent?key=${this.config.apiKey}`;
    }
    return this.config.apiUrl;
  }
  getHeaders(provider) {
    const headers = {
      "Content-Type": "application/json"
    };
    if (provider !== "gemini" && this.config.apiKey) {
      headers["Authorization"] = `Bearer ${this.config.apiKey}`;
    }
    return headers;
  }
  getRequestBody(content, provider) {
    if (provider === "gemini") {
      return {
        contents: [
          {
            parts: [
              { text: _AIService.SYSTEM_PROMPT },
              { text: content }
            ]
          }
        ]
      };
    }
    return {
      model: this.config.model,
      messages: [
        {
          role: "system",
          content: _AIService.SYSTEM_PROMPT
        },
        {
          role: "user",
          content
        }
      ]
    };
  }
  parseResponse(data, provider) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j;
    try {
      let tagsText = "";
      if (provider === "gemini") {
        tagsText = ((_f = (_e = (_d = (_c = (_b = (_a = data.candidates) == null ? void 0 : _a[0]) == null ? void 0 : _b.content) == null ? void 0 : _c.parts) == null ? void 0 : _d[0]) == null ? void 0 : _e.text) == null ? void 0 : _f.trim()) || "";
      } else {
        tagsText = ((_j = (_i = (_h = (_g = data.choices) == null ? void 0 : _g[0]) == null ? void 0 : _h.message) == null ? void 0 : _i.content) == null ? void 0 : _j.trim()) || "";
      }
      return tagsText.split(",").map((tag) => tag.trim()).filter((tag) => tag).map((tag) => tag.replace(/\s+/g, ""));
    } catch (error) {
      throw new Error("\u89E3\u6790 AI \u54CD\u5E94\u5931\u8D25");
    }
  }
};
var AIService = _AIService;
AIService.SYSTEM_PROMPT = "\u4F60\u662F\u4E00\u4E2A\u6587\u6863\u6807\u7B7E\u751F\u6210\u5668\u3002\u8BF7\u6839\u636E\u6587\u6863\u5185\u5BB9\u751F\u6210\u6700\u591A 3 \u4E2A\u76F8\u5173\u7684\u6807\u7B7E\u3002\u53EA\u9700\u8FD4\u56DE\u6807\u7B7E\uFF0C\u7528\u9017\u53F7\u5206\u9694\uFF0C\u4E0D\u8981\u5305\u542B\u5176\u4ED6\u89E3\u91CA\u6216\u8BF4\u660E\uFF0C\u7981\u6B62\u6587\u672C\u4E2D\u5305\u542B\u7A7A\u683C\u3002";
AIService.TIMEOUT = 3e4;
AIService.MAX_RETRIES = 2;

// main.ts
var DEFAULT_SETTINGS = {
  provider: "openai",
  providerSettings: {
    openai: {
      apiKey: "",
      apiUrl: "https://api.openai.com/v1/chat/completions",
      model: "gpt-4o-mini"
    },
    gemini: {
      apiKey: "",
      apiUrl: "https://generativelanguage.googleapis.com/v1beta/models/",
      model: "gemini-1.5-flash"
    },
    claude: {
      apiKey: "",
      apiUrl: "https://api.anthropic.com/v1/messages",
      model: "claude-3-5-sonnet"
    },
    deepseek: {
      apiKey: "",
      apiUrl: "https://api.deepseek.com/v1/chat/completions",
      model: "deepseek-chat"
    },
    volcano: {
      apiKey: "",
      apiUrl: "https://ark.cn-beijing.volces.com/api/v3/chat/completions",
      model: ""
    }
  }
};
var PROVIDER_CONFIGS = {
  openai: {
    defaultUrl: "https://api.openai.com/v1/chat/completions",
    defaultModel: "gpt-4o-mini",
    models: ["gpt-4o-mini", "gpt-4o", "gpt-3.5-turbo"]
  },
  gemini: {
    defaultUrl: "https://generativelanguage.googleapis.com/v1beta/models/",
    defaultModel: "gemini-1.5-flash",
    models: ["gemini-1.5-flash", "gemini-2.0-flash"]
  },
  claude: {
    defaultUrl: "https://api.anthropic.com/v1/messages",
    defaultModel: "claude-3-5-sonnet",
    models: ["claude-3-5-sonnet", "claude-3-7-sonnet", "claude-3-opus", "claude-3-haiku"]
  },
  deepseek: {
    defaultUrl: "https://api.deepseek.com/v1/chat/completions",
    defaultModel: "deepseek-chat",
    models: ["deepseek-chat", "deepseek-coder"]
  },
  volcano: {
    defaultUrl: "https://ark.cn-beijing.volces.com/api/v3/chat/completions",
    defaultModel: "",
    models: [""]
  }
};
var AutoTaggerPlugin = class extends import_obsidian.Plugin {
  onload() {
    return __async(this, null, function* () {
      yield this.loadSettings();
      this.addRibbonIcon("tag", "\u751F\u6210\u6807\u7B7E", () => __async(this, null, function* () {
        yield this.generateTags();
      }));
      this.addSettingTab(new AutoTaggerSettingTab(this.app, this));
    });
  }
  loadSettings() {
    return __async(this, null, function* () {
      this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
    });
  }
  saveSettings() {
    return __async(this, null, function* () {
      yield this.saveData(this.settings);
    });
  }
  generateTags() {
    return __async(this, null, function* () {
      const activeView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
      if (!activeView) {
        new import_obsidian.Notice("\u8BF7\u6253\u5F00\u4E00\u4E2A\u6587\u6863\u4EE5\u751F\u6210\u6807\u7B7E");
        return;
      }
      const file = activeView.file;
      const content = yield this.app.vault.read(file);
      const loadingNotice = new import_obsidian.Notice("\u6B63\u5728\u751F\u6210\u6807\u7B7E...", 0);
      try {
        const tags = yield this.analyzeTags(content);
        loadingNotice.hide();
        new TagSelectionModal(this.app, tags, (selectedTags) => __async(this, null, function* () {
          yield this.updateFileFrontMatter(file, selectedTags);
        })).open();
      } catch (error) {
        loadingNotice.hide();
        new import_obsidian.Notice(`\u751F\u6210\u6807\u7B7E\u5931\u8D25\uFF1A${error.message}`);
      }
    });
  }
  analyzeTags(content) {
    return __async(this, null, function* () {
      const currentProvider = this.settings.provider;
      const providerConfig = this.settings.providerSettings[currentProvider];
      if (!providerConfig || !providerConfig.apiKey) {
        throw new Error("\u8BF7\u5148\u5728\u8BBE\u7F6E\u4E2D\u914D\u7F6E API \u5BC6\u94A5");
      }
      const config = {
        apiKey: providerConfig.apiKey,
        apiUrl: providerConfig.apiUrl,
        model: providerConfig.model
      };
      const aiService = new AIService(config);
      try {
        return yield aiService.generateTags(content);
      } catch (error) {
        throw new Error(`\u751F\u6210\u6807\u7B7E\u5931\u8D25\uFF1A${error.message}`);
      }
    });
  }
  updateFileFrontMatter(file, newTags) {
    return __async(this, null, function* () {
      const content = yield this.app.vault.read(file);
      const yamlRegex = /^---\n([\s\S]*?)\n---/;
      const hasYaml = yamlRegex.test(content);
      let newContent;
      if (hasYaml) {
        const yamlMatch = content.match(yamlRegex);
        const yaml = yamlMatch[1];
        const tagsRegex = /^tags:\s*\[(.*)\]/m;
        const tagsMatch = yaml.match(tagsRegex);
        if (tagsMatch) {
          const existingTagsStr = tagsMatch[1];
          const existingTags = existingTagsStr.split(",").map((tag) => tag.trim()).filter((tag) => tag !== "");
          const allTags = [...new Set([...existingTags, ...newTags])];
          newContent = content.replace(tagsRegex, `tags: [${allTags.join(", ")}]`);
        } else {
          newContent = content.replace(yamlRegex, `---
${yaml}
tags: [${newTags.join(", ")}]
---`);
        }
      } else {
        newContent = `---
tags: [${newTags.join(", ")}]
---

${content}`;
      }
      yield this.app.vault.modify(file, newContent);
      new import_obsidian.Notice(`\u5DF2\u6210\u529F\u6DFB\u52A0\u6807\u7B7E\uFF1A${newTags.join(", ")}`);
    });
  }
};
var TagSelectionModal = class extends import_obsidian.Modal {
  constructor(app, tags, onSubmit) {
    super(app);
    this.tags = tags;
    this.onSubmit = onSubmit;
    this.selectedTags = [...tags];
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h3", { text: "\u63A8\u8350\u6807\u7B7E" });
    const tagContainer = contentEl.createDiv({ cls: "tag-container" });
    this.tags.forEach((tag, index) => {
      const tagRow = tagContainer.createDiv({ cls: "tag-row" });
      const checkbox = tagRow.createEl("input", {
        type: "checkbox",
        attr: { checked: true }
      });
      const tagInput = tagRow.createEl("input", {
        type: "text",
        value: tag
      });
      checkbox.addEventListener("change", () => {
        if (checkbox.checked) {
          this.selectedTags[index] = tagInput.value;
        } else {
          this.selectedTags[index] = null;
        }
      });
      tagInput.addEventListener("input", () => {
        if (checkbox.checked) {
          this.selectedTags[index] = tagInput.value;
        }
      });
    });
    const buttonContainer = contentEl.createDiv({ cls: "button-container" });
    buttonContainer.createEl("button", { text: "\u53D6\u6D88" }).addEventListener("click", () => {
      this.close();
    });
    buttonContainer.createEl("button", { text: "\u786E\u5B9A" }).addEventListener("click", () => {
      const finalTags = this.selectedTags.filter((tag) => tag !== null);
      this.onSubmit(finalTags);
      this.close();
    });
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var AutoTaggerSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h3", { text: "\u81EA\u52A8\u6807\u7B7E\u751F\u6210\u8BBE\u7F6E" });
    const providerDescriptions = {
      openai: [
        "OpenAI",
        "\u2022 API \u5730\u5740\uFF1Ahttps://api.openai.com/v1/chat/completions",
        "\u2022 \u652F\u6301\u6A21\u578B\uFF1Agpt-4o-mini, gpt-4o, gpt-3.5-turbo"
      ],
      gemini: [
        "Gemini",
        "\u2022 API \u5730\u5740\uFF1Ahttps://generativelanguage.googleapis.com/v1beta/models/<MODEL_NAME>/generateContent",
        "\u2022 \u652F\u6301\u6A21\u578B\uFF1Agemini-1.5-flash, gemini-2.0-flash"
      ],
      claude: [
        "Claude",
        "\u2022 API \u5730\u5740\uFF1Ahttps://api.anthropic.com/v1/messages",
        "\u2022 \u652F\u6301\u6A21\u578B\uFF1Aclaude-3-5-sonnet, claude-3-7-sonnet, claude-3-opus, claude-3-haiku"
      ],
      deepseek: [
        "DeepSeek - \u6DF1\u5EA6\u6C42\u7D22",
        "\u2022 API \u5730\u5740\uFF1Ahttps://api.deepseek.com/v1/chat/completions",
        "\u2022 \u652F\u6301\u6A21\u578B\uFF1Adeepseek-chat, deepseek-coder"
      ],
      volcano: [
        "DeepSeek - \u706B\u5C71\u5F15\u64CE",
        "\u2022 API \u5730\u5740\uFF1Ahttps://ark.cn-beijing.volces.com/api/v3/chat/completions",
        "\u2022 \u6CE8\u610F\uFF1A\u9700\u8981\u5728\u8BF7\u6C42 URL \u4E2D\u6DFB\u52A0\u6A21\u578B\u670D\u52A1\u540D\u79F0"
      ]
    };
    const showProviderInfo = (provider) => {
      const providerSection = containerEl.querySelector(".provider-section");
      if (providerSection) {
        providerSection.remove();
      }
      const section = containerEl.createDiv({ cls: "provider-section" });
      const providerInfo = section.createDiv({ cls: "provider-info" });
      providerDescriptions[provider].forEach((text) => {
        providerInfo.createEl("p", { text });
      });
    };
    showProviderInfo(this.plugin.settings.provider);
    new import_obsidian.Setting(containerEl).setName("AI \u63D0\u4F9B\u5546").setDesc("\u9009\u62E9 AI \u670D\u52A1\u63D0\u4F9B\u5546").addDropdown((dropdown) => {
      Object.keys(PROVIDER_CONFIGS).forEach((provider) => {
        dropdown.addOption(provider, provider === "openai" ? "OpenAI" : provider === "gemini" ? "Gemini" : provider === "claude" ? "Claude\uFF08\u6D4B\u8BD5\u4E2D\uFF09" : provider === "deepseek" ? "DeepSeek - \u6DF1\u5EA6\u6C42\u7D22" : "DeepSeek - \u706B\u5C71\u5F15\u64CE");
      });
      dropdown.setValue(this.plugin.settings.provider);
      dropdown.onChange((value) => __async(this, null, function* () {
        this.plugin.settings.provider = value;
        if (!this.plugin.settings.providerSettings[value].apiUrl) {
          this.plugin.settings.providerSettings[value].apiUrl = PROVIDER_CONFIGS[value].defaultUrl;
        }
        this.plugin.settings.providerSettings[value].model = PROVIDER_CONFIGS[value].defaultModel;
        yield this.plugin.saveSettings();
        showProviderInfo(value);
        this.display();
      }));
    });
    new import_obsidian.Setting(containerEl).setName("API \u5BC6\u94A5").setDesc("\u8F93\u5165\u4F60\u7684 API \u5BC6\u94A5").addText((text) => text.setPlaceholder("\u8BF7\u8F93\u5165 API \u5BC6\u94A5").setValue(this.plugin.settings.providerSettings[this.plugin.settings.provider].apiKey).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.providerSettings[this.plugin.settings.provider].apiKey = value;
      yield this.plugin.saveSettings();
    })));
    new import_obsidian.Setting(containerEl).setName("API \u5730\u5740").setDesc("\u8F93\u5165 API \u5730\u5740").addText((text) => text.setPlaceholder(PROVIDER_CONFIGS[this.plugin.settings.provider].defaultUrl).setValue(this.plugin.settings.providerSettings[this.plugin.settings.provider].apiUrl).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.providerSettings[this.plugin.settings.provider].apiUrl = value;
      yield this.plugin.saveSettings();
    })));
    if (this.plugin.settings.provider === "gemini") {
      containerEl.createEl("div", {
        text: "\u6CE8\u610F\uFF1AGemini API URL \u5E94\u4EE5 https://generativelanguage.googleapis.com/v1beta/models/ \u5F00\u5934\uFF0C\u6A21\u578B\u540D\u79F0\u5C06\u81EA\u52A8\u6DFB\u52A0\u3002",
        cls: "setting-item-description"
      });
    } else if (this.plugin.settings.provider === "volcano") {
      containerEl.createEl("div", {
        text: "\u6CE8\u610F\uFF1A\u706B\u5C71\u5F15\u64CE API URL \u5E94\u4EE5 https://ark.cn-beijing.volces.com/api/v3/chat/completions \u5F00\u5934\uFF0C\u6A21\u578B\u670D\u52A1\u540D\u79F0\u5C06\u81EA\u52A8\u6DFB\u52A0\u3002",
        cls: "setting-item-description"
      });
    }
    new import_obsidian.Setting(containerEl).setName("\u6A21\u578B").setDesc("\u9009\u62E9 AI \u6A21\u578B").addDropdown((dropdown) => {
      const models = PROVIDER_CONFIGS[this.plugin.settings.provider].models;
      models.forEach((model) => {
        dropdown.addOption(model, model);
      });
      if (!models.includes(this.plugin.settings.model)) {
        dropdown.addOption(this.plugin.settings.model, this.plugin.settings.model);
      }
      dropdown.setValue(this.plugin.settings.providerSettings[this.plugin.settings.provider].model);
      dropdown.onChange((value) => __async(this, null, function* () {
        this.plugin.settings.providerSettings[this.plugin.settings.provider].model = value;
        yield this.plugin.saveSettings();
      }));
    });
    new import_obsidian.Setting(containerEl).setName("\u81EA\u5B9A\u4E49\u6A21\u578B").setDesc("\u8F93\u5165\u81EA\u5B9A\u4E49\u6A21\u578B\u540D\u79F0 (\u53EF\u9009)").addText((text) => text.setPlaceholder("\u81EA\u5B9A\u4E49\u6A21\u578B\u540D\u79F0").setValue(this.plugin.settings.providerSettings[this.plugin.settings.provider].model).onChange((value) => __async(this, null, function* () {
      if (value) {
        this.plugin.settings.providerSettings[this.plugin.settings.provider].model = value;
        yield this.plugin.saveSettings();
        this.display();
      }
    })));
  }
};
//# sourceMappingURL=data:application/json;base64,
